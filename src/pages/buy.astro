---
// /src/pages/buy.astro
import Base from "../layouts/Base.astro";

const CLIENT_ID =
  import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || import.meta.env.PAYPAL_CLIENT_ID || "";
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox").toLowerCase();

const title = "Buy the Full CSV";
const description = "Secure checkout via PayPal. Receive a one-time download link after purchase.";
const price = "9.00"; // USD
---
<Base title={title} description={description}>
  <Fragment slot="head">
    {CLIENT_ID && (
      <script
        src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons&disable-funding=paylater,card,credit`}
        defer
      />
    )}
    <style>
      /* Keep PayPal's outer wrappers transparent (outside the iframe) */
      #paypal-btns > div,
      #paypal-btns .paypal-buttons,
      #paypal-btns .paypal-button-row,
      #paypal-btns .paypal-button-container,
      #paypal-btns iframe { background: transparent !important; }
    </style>
  </Fragment>

  <nav class="mb-4 flex flex-wrap gap-2">
    <a href="/" class="chip focus-ring">← Home</a>
    <a href="/az/" class="chip focus-ring">A–Z</a>
    <a href="/decade/" class="chip focus-ring">Decades</a>
  </nav>

  <h1 class="text-2xl md:text-3xl font-bold mb-2">{title}</h1>
  <p class="text-slate-700 dark:text-slate-300 mb-4">
    Get instant access to the full dataset (CSV). Price:
    <strong class="font-semibold text-slate-900 dark:text-slate-100">${price} USD</strong>.
  </p>

  {!CLIENT_ID ? (
    <p class="text-red-600 dark:text-red-400">
      Missing PayPal client ID.
      Set <code>PUBLIC_PAYPAL_CLIENT_ID</code> (and <code>PUBLIC_PAYPAL_ENV</code>) in your env and redeploy.
    </p>
  ) : (
    <>
      <section class="rounded-xl border p-4 bg-white shadow-sm text-slate-900 border-slate-200 dark:border-slate-700">
        <h2 class="sr-only">Payment</h2>

        <div id="paypal-loading" role="status" aria-live="polite"
             class="text-sm text-slate-600 text-center">Loading…</div>

        <div class="mt-3 flex justify-center">
          <div id="paypal-btns" class="w-full max-w-[480px]"></div>
        </div>
      </section>

      <p class="mt-3 text-sm text-slate-700 dark:text-slate-300">
        Payments are processed securely by PayPal. You’ll receive a one-time download link immediately after purchase.
      </p>

      <div id="result" class="mt-3" aria-live="polite"></div>

      <p class="mt-1 text-center text-xs text-slate-500 dark:text-slate-400">
        ENV: {ENV} • Powered by <span class="font-semibold">PayPal</span>
      </p>
    </>
  )}

  {CLIENT_ID && (
    <script is:inline>
      // ---------- Helpers ----------
      function $(id){ return document.getElementById(id); }
      function hideLoading(msg){
        const el = $('paypal-loading');
        if (!el) return;
        if (msg !== undefined) el.textContent = msg;
        el.style.display = 'none';
      }
      function setResultHTML(html){
        const el = $('result');
        if (!el) return;
        el.innerHTML = html || '';
      }
      async function httpJSON(url, opts){
        const r = await fetch(url, opts);
        let data = null;
        try { data = await r.json(); } catch {}
        return { ok: r.ok, status: r.status, data };
      }

      window.addEventListener('load', () => {
        const fallbackTimer = setTimeout(() => hideLoading(), 8000);
        if (!window.paypal || !window.paypal.Buttons) return;

        paypal.Buttons({
          style: { layout: 'vertical', shape: 'rect', color: 'gold', label: 'paypal', tagline: false },

          onInit() { hideLoading(); setResultHTML(''); },

          async createOrder() {
            const res = await httpJSON('/.netlify/functions/paypal-create-order');
            if (!res.ok || !res.data?.id) {
              setResultHTML('<p class="text-red-600 dark:text-red-400">Could not create order. Please refresh and try again.</p>');
              throw new Error('createOrder failed');
            }
            return res.data.id;
          },

          async onApprove(data) {
            setResultHTML('<p class="text-slate-600 dark:text-slate-300">Finalizing payment…</p>');

            const cap = await httpJSON('/.netlify/functions/paypal-capture-order', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderID: data.orderID })
            });

            if (!cap.ok || !cap.data?.ok || !cap.data?.token) {
              hideLoading();
              const msg = (cap && cap.data && cap.data.error)
                ? cap.data.error
                : ('Capture failed (HTTP ' + (cap ? cap.status : '?') + ').');
              setResultHTML('<p class="text-red-600 dark:text-red-400">Something went wrong (capture). ' + msg + '</p>');
              return;
            }

            // Payment captured → redirect to protected download route
            hideLoading();

            const dlPath = '/download/' + cap.data.token;

            // Visible fallback link in case navigation is blocked
            setResultHTML(
              '<p class="text-slate-700 dark:text-slate-300">Preparing your download… If it doesn’t start, ' +
              '<a class="link" href="' + dlPath + '">click here</a>.</p>'
            );

            // Navigate now
            window.location.href = dlPath;
          },

          onError(err) {
            hideLoading();
            setResultHTML('<p class="text-red-600 dark:text-red-400">PayPal error: ' + (err?.message || String(err)) + '</p>');
          }
        })
        .render('#paypal-btns')
        .then(() => { clearTimeout(fallbackTimer); hideLoading(); })
        .catch(() => { clearTimeout(fallbackTimer); hideLoading(); });
      });
    </script>
  )}
</Base>
