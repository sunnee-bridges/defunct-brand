---
import "../styles/tailwind.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

const CLIENT_ID =
  import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || import.meta.env.PAYPAL_CLIENT_ID || "";
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox").toLowerCase();

const title = "Buy the Full CSV";
const description = "Secure checkout via PayPal. Receive a one-time download link after purchase.";
const price = "9.00"; // USD

// If you need brand slugs here later, you can import like on the other page.
---

<html lang="en" class="h-full">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- Allow pages to inject extra SEO if needed -->
    <slot name="head" />

    <!-- Theme boot (same as other pages) -->
    <script is:inline>
      (function () {
        const KEY = 'theme';
        const saved = localStorage.getItem(KEY);
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme = saved || (prefersDark ? 'dark' : 'light');
        if (theme === 'dark') document.documentElement.classList.add('dark');
        document.documentElement.dataset.theme = theme;
      })();
    </script>

    <!-- Mobile address-bar color per theme -->
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)">
    <meta name="theme-color" content="#0b0b0f" media="(prefers-color-scheme: dark)">

    {CLIENT_ID && (
      <script
        src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons`}
        defer
      />
    )}

    <style>
      /* Minor non-Tailwind tweaks */
      .skip-link{position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden}
      .skip-link:focus{left:1rem;top:1rem;width:auto;height:auto;padding:.5rem .75rem;border-radius:.375rem;background:#111827;color:#fff;z-index:50}
    </style>
  </head>

  <body class="min-h-full bg-white text-gray-900 dark:bg-[#0b0b0f] dark:text-slate-100">
    <!-- Skip link for keyboard users -->
    <a href="#main" class="skip-link">Skip to content</a>

    <!-- Header (keeps site nav + theme toggle behavior consistent) -->
    <Header />

    <main id="main" class="max-w-[1040px] mx-auto px-4 py-8 sm:py-10">
      <h1 class="text-2xl sm:text-3xl font-bold tracking-tight">{title}</h1>
      <p class="mt-2 text-base sm:text-lg text-gray-600 dark:text-slate-300">
        Get instant access to the full dataset (CSV). Price:
        <strong class="font-semibold text-gray-900 dark:text-slate-100">${price} USD</strong>.
      </p>

      {!CLIENT_ID ? (
        <p class="mt-4 text-red-600 dark:text-red-400">
          Missing PayPal client ID.
          Set <code>PUBLIC_PAYPAL_CLIENT_ID</code> (and <code>PUBLIC_PAYPAL_ENV</code>) in your env and redeploy.
        </p>
      ) : (
        <>
          <!-- Status -->
          <div id="paypal-loading" role="status" aria-live="polite"
               class="mt-4 text-sm text-gray-600 dark:text-slate-300">Loading…</div>

          <!-- PayPal smart buttons mount here -->
          <div id="paypal-btns" class="mt-3"></div>

          <!-- Result area: shows the download link or errors -->
          <div id="result" class="mt-4 text-sm text-gray-600 dark:text-slate-300"></div>

          <p class="mt-2 text-sm text-gray-600 dark:text-slate-300">
            Payments are processed securely by PayPal. You’ll receive a one-time download link immediately after purchase.
          </p>
        </>
      )}
    </main>

    <!-- Footer -->
    <Footer />

    {CLIENT_ID && (
      <script is:inline>
        // Small helpers
        function $(id){ return document.getElementById(id); }
        function hideLoading(msg){
          const el = $('paypal-loading');
          if (!el) return;
          if (msg !== undefined) el.textContent = msg;
          el.style.display = 'none';
        }
        function setResult(text){
          const el = $('result');
          if (!el) return;
          el.textContent = text || '';
        }
        async function httpJSON(url, opts){
          const r = await fetch(url, opts);
          let data = null;
          try { data = await r.json(); } catch {}
          return { ok: r.ok, status: r.status, data };
        }

        window.addEventListener('load', () => {
          // Fallback if SDK blocked by extensions; hide after ~8s
          const fallbackTimer = setTimeout(() => hideLoading(), 8000);

          if (!window.paypal || !window.paypal.Buttons) {
            // SDK will hydrate shortly; render() will also call hideLoading
            return;
          }

          paypal.Buttons({
            style: { layout: 'vertical', shape: 'rect', color: 'gold', label: 'paypal' },

            onInit() {
              hideLoading();
              setResult('');
            },

            async createOrder() {
              // Ask server to create the Order
              const { ok, data } = await httpJSON('/.netlify/functions/paypal-create-order');
              if (!ok || !data?.id) {
                setResult('Could not create order. Please refresh and try again.');
                throw new Error('createOrder failed');
              }
              return data.id;
            },

            async onApprove(data) {
              setResult('Finalizing payment…');

              // Capture on server
              const cap = await httpJSON('/.netlify/functions/paypal-capture-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderID: data.orderID })
              });

              if (!cap.ok || !cap.data?.ok || !cap.data?.token) {
                hideLoading();
                const msg = cap.data?.error || `Capture failed (HTTP ${cap.status}).`;
                setResult(msg);
                return;
              }

              // Redeem token → presigned URL
              const dl = await httpJSON('/.netlify/functions/download-link', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ token: cap.data.token })
              });

              hideLoading();

              if (!dl.ok || !dl.data?.url) {
                const msg = dl.data?.error || `Download link error (HTTP ${dl.status}).`;
                setResult(msg);
                return;
              }

              // Render the “Click to download” link
              const a = document.createElement('a');
              a.href = dl.data.url;
              a.textContent = 'Click to download your CSV';
              a.className = 'underline text-blue-600 dark:text-blue-300 hover:no-underline focus:outline-none focus:ring-4 focus:ring-offset-2 focus:ring-blue-600 dark:focus:ring-blue-400 focus:ring-offset-white dark:focus:ring-offset-[#0b0b0f] rounded';
              a.rel = 'noopener';
              const result = $('result');
              if (result) { result.innerHTML = ''; result.appendChild(a); }
            },

            onError(err) {
              hideLoading();
              setResult('PayPal error: ' + (err?.message || String(err)));
            }
          })
          .render('#paypal-btns')
          .then(() => { clearTimeout(fallbackTimer); hideLoading(); })
          .catch(() => { clearTimeout(fallbackTimer); hideLoading(); });
        });
      </script>
    )}
  </body>
</html>
