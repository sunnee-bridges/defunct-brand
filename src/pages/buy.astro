---
const CLIENT_ID = import.meta.env.PUBLIC_PAYPAL_CLIENT_ID;
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox");
const title = "Buy the Full CSV";
const price = "9.00";
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    {CLIENT_ID && <script src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons`} defer></script>}

    <style>
      :root { --ok:#16a34a; --err:#b91c1c; --muted:#64748b; --link:#2563eb; }
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 2rem; }
      .wrap { max-width: 720px; margin: 0 auto; }
      a.link { color: var(--link); text-decoration: underline; }
      #result { margin-top: 1rem; padding: .75rem .9rem; border-radius: .5rem; }
      #result.info    { background: #f1f5f9; color: #0f172a; }
      #result.success { background: #f0fdf4; color: #14532d; border: 1px solid #bbf7d0; }
      #result.error   { background: #fef2f2; color: var(--err); border: 1px solid #fecaca; }
      #result .muted  { color: var(--muted); font-size: .9em; }
      .row { display:flex; align-items:center; gap:.6rem; }
      .spinner { width:16px; height:16px; border:2px solid #e2e8f0; border-top-color:#334155; border-radius:50%; animation: spin .7s linear infinite; }
      @keyframes spin { to { transform: rotate(360deg); } }
      button.ghost { border:1px solid #cbd5e1; background:#fff; padding:.45rem .7rem; border-radius:.5rem; cursor:pointer; }
      button.ghost:hover { background:#f8fafc; }
      details summary { cursor: pointer; }
    </style>
  </head>
  <body>
    <div class="wrap">
      <h1>{title}</h1>
      <p>Get instant access to the full dataset (CSV). Price: <strong>${price} USD</strong>.</p>

      {!CLIENT_ID ? (
        <p style="color:#b91c1c">Missing PUBLIC_PAYPAL_CLIENT_ID</p>
      ) : (
        <div id="paypal-btns" aria-live="polite">Loading…</div>
      )}

      <div id="result" class="info" role="status" aria-live="polite"></div>
    </div>

    <script is:inline>
      // ---------- Helpers ----------
      function setMsg(html, type='info'){
        const el = document.getElementById('result');
        el.className = type;
        el.innerHTML = html;
      }
      function badge(text){ return `<span class="row"><span class="spinner" aria-hidden="true"></span><span>${text}</span></span>`; }

      async function fetchJSON(url, opts = {}, { retries = 2, baseDelay = 300 } = {}) {
        let lastErr;
        for (let i = 0; i <= retries; i++) {
          try {
            const r = await fetch(url, opts);
            let data = null;
            try { data = await r.json(); } catch {}
            if (!r.ok) throw new Error(data?.error || `HTTP ${r.status}`);
            return data;
          } catch (err) {
            lastErr = err;
            if (i < retries) await new Promise(res => setTimeout(res, baseDelay * Math.pow(2, i)));
          }
        }
        throw lastErr || new Error('Network error');
      }

      function renderRetry(label, handler){
        const el = document.createElement('button');
        el.className = 'ghost';
        el.type = 'button';
        el.textContent = label;
        el.addEventListener('click', handler);
        return el;
      }

      // ---------- PayPal flow ----------
      window.addEventListener('load', () => {
        if (!window.paypal) return;

        const mount = document.getElementById('paypal-btns');

        // We’ll keep the last orderID around for retry after transient failures
        let lastOrderID = null;

        async function createOrder() {
          setMsg(badge('Creating order…'));
          const j = await fetchJSON('/.netlify/functions/paypal-create-order');
          if (!j.id) throw new Error('Could not create order.');
          lastOrderID = j.id;
          setMsg('');
          return j.id;
        }

        async function captureAndDownload(orderID) {
          // Capture
          setMsg(badge('Capturing payment…'));
          const res = await fetchJSON('/.netlify/functions/paypal-capture-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderID })
          }, { retries: 2 });

          if (!res.ok || !res.token) {
            const msg = 'Capture failed. Please try again.';
            throw new Error(typeof res.error === 'string' ? res.error : msg);
          }

          // Redeem token -> presign
          setMsg(badge('Preparing your download…'));
          const dl = await fetchJSON('/.netlify/functions/download-link', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ token: res.token })
          }, { retries: 2 });

          if (!dl.url) throw new Error(dl.error || 'Could not generate download link.');

          setMsg(
            `<strong>Success!</strong> <a class="link" href="${dl.url}" rel="noopener">Click to download your CSV</a>`,
            'success'
          );
        }

        function showFriendlyError(err, phaseLabel, retryHandler){
          const safe = (err && err.message) ? err.message : String(err || 'Unknown error');
          const box = document.createElement('div');
          box.innerHTML = `
            <div><strong>${phaseLabel} failed.</strong> Please try again.</div>
            <details class="muted"><summary>Show details</summary><div><code>${safe}</code></div></details>
          `;
          setMsg(box.innerHTML, 'error');

          if (retryHandler) {
            const btn = renderRetry('Try again', retryHandler);
            document.getElementById('result').appendChild(document.createTextNode(' '));
            document.getElementById('result').appendChild(btn);
          }
        }

        paypal.Buttons({
          style: { layout: 'vertical', shape: 'rect', color: 'gold', label: 'paypal' },

          createOrder: async () => {
            try {
              return await createOrder();
            } catch (err) {
              showFriendlyError(err, 'Order creation', async () => {
                try { await createOrder(); } catch(e){ showFriendlyError(e, 'Order creation'); }
              });
              // Throwing keeps PayPal from proceeding
              throw err;
            }
          },

          onApprove: async (data) => {
            const orderID = data?.orderID || lastOrderID;
            try {
              await captureAndDownload(orderID);
            } catch (err) {
              showFriendlyError(err, 'Payment capture', async () => {
                try { await captureAndDownload(orderID); } catch(e){ showFriendlyError(e, 'Payment capture'); }
              });
            }
          },

          onError: (err) => {
            showFriendlyError(err, 'PayPal', async () => {
              try { await createOrder(); } catch(e){ showFriendlyError(e, 'Order creation'); }
            });
          }
        }).render(mount);
      });
    </script>
  </body>
</html>
