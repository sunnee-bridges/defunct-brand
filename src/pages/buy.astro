---
// /src/pages/buy.astro
import Base from "../layouts/Base.astro";

const CLIENT_ID =
  import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || import.meta.env.PAYPAL_CLIENT_ID || "";
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox").toLowerCase();

// Display-only price label; server decides real amount via PRICE_USD
const PRICE_LABEL = import.meta.env.PUBLIC_PRICE_LABEL || "$9";

const title = "Buy the Full CSV";
const description = "Secure checkout via PayPal. Receive a one-time download link after purchase.";
---

<Base title={title} description={description}>
  <Fragment slot="head">
    {CLIENT_ID && (
      <script
        src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons&disable-funding=paylater,card,credit`}
        defer
      />
    )}
    <style>
      /* Keep PayPal wrappers transparent so it looks good in both themes */
      #paypal-btns > div,
      #paypal-btns .paypal-buttons,
      #paypal-btns .paypal-button-row,
      #paypal-btns .paypal-button-container,
      #paypal-btns iframe { background: transparent !important; }
      .link { color:#2563eb; text-decoration:underline; }
      .btn {
        display:inline-flex; align-items:center; gap:.5rem;
        padding:.5rem 1rem; border-radius:9999px;
        background:#059669; color:#fff; text-decoration:none;
      }
      .btn[aria-disabled="true"] { opacity:.6; pointer-events:none; }
      .muted { color: #6b7280; }
      .ok { color: #065f46; }
      .err { color: #b91c1c; }
      .note { font-size:.875rem; }
      .chip { border:1px solid #cbd5e1; padding:.25rem .5rem; border-radius:9999px; }
    </style>
  </Fragment>

  <nav class="mb-4 flex flex-wrap gap-2">
    <a href="/" class="chip">← Home</a>
    <a href="/az/" class="chip">A–Z</a>
    <a href="/decade/" class="chip">Decades</a>
  </nav>

  <h1 class="text-2xl md:text-3xl font-bold mb-2">{title}</h1>
  <p class="text-slate-700 dark:text-slate-300 mb-4">
    Get instant access to the full dataset (CSV). Price:
    <strong class="font-semibold text-slate-900 dark:text-slate-100">{PRICE_LABEL} USD</strong>.
  </p>

  {!CLIENT_ID ? (
    <p class="err">
      Missing PayPal client ID.
      Set <code>PUBLIC_PAYPAL_CLIENT_ID</code> (and <code>PUBLIC_PAYPAL_ENV</code>) in your env and redeploy.
    </p>
  ) : (
    <>
      <section class="rounded-xl border p-4 bg-white shadow-sm text-slate-900 border-slate-200 dark:border-slate-700">
        <h2 class="sr-only">Payment</h2>
        <div id="paypal-loading" role="status" aria-live="polite" class="text-sm text-slate-600 text-center">
          Loading…
        </div>
        <div class="mt-3 flex justify-center">
          <div id="paypal-btns" class="w-full max-w-[480px]"></div>
        </div>
      </section>

      <!-- Success & actions area -->
      <div id="result" class="mt-4" aria-live="polite"></div>

      <p class="mt-3 text-sm text-slate-700 dark:text-slate-300">
        Payments are processed securely by PayPal. You’ll receive a one-time download link immediately after purchase.
      </p>
      <p class="mt-1 text-center text-xs text-slate-500 dark:text-slate-400">
        ENV: {ENV} • Powered by <span class="font-semibold">PayPal</span>
      </p>
    </>
  )}

  {CLIENT_ID && (
    <script is:inline>
      // ---------- Helpers ----------
      const $ = (id) => document.getElementById(id);
      const setHTML = (id, html) => { const el = $(id); if (el) el.innerHTML = html; };
      const hideLoading = (msg) => {
        const el = $('paypal-loading');
        if (!el) return;
        if (msg !== undefined) el.textContent = msg;
        el.style.display = 'none';
      };
      async function httpJSON(url, opts){
        const r = await fetch(url, opts);
        let data = null;
        try { data = await r.json(); } catch {}
        return { ok: r.ok, status: r.status, data };
      }

      // Debounce helper
      function withDebounce(fn, ms=1500){
        let inFlight = false, lastAt = 0;
        return async function(...args){
          const now = Date.now();
          if (inFlight || (now - lastAt) < ms) return;
          inFlight = true; lastAt = now;
          try { return await fn.apply(this, args); }
          finally { inFlight = false; }
        };
      }

      // Render success block with remaining counter + guarded download button
      function renderDownloadUI({ token, uses, maxUses, last, autoMessage }){
        const remaining = Math.max(0, (maxUses || 0) - (uses || 0));
        const expiresLine = window.__expiresAt ? `
          <div class="note muted">Link valid until <time>${new Date(window.__expiresAt).toLocaleString()}</time>.</div>
        ` : '';

        const startedLine = autoMessage
          ? `<div class="ok">✅ ${autoMessage}</div>`
          : '';

        setHTML('result', `
          <div class="rounded-lg border border-slate-200 dark:border-slate-700 p-4 bg-white dark:bg-slate-900">
            ${startedLine}
            <div class="note muted mt-1">Remaining downloads: <strong>${remaining}</strong> of <strong>${maxUses}</strong></div>
            ${expiresLine}

            <div class="mt-3">
              <button id="btn-download" type="button" class="btn" data-token="${token}">
                <svg viewBox="0 0 20 20" aria-hidden="true" width="20" height="20">
                  <path fill="currentColor" d="M10 2a1 1 0 0 1 1 1v7.586l2.293-2.293a1 1 0 1 1 1.414 1.414l-4.007 4.007a1 1 0 0 1-1.414 0L5.279 9.707A1 1 0 1 1 6.693 8.293L9 10.586V3a1 1 0 0 1 1-1Z"/>
                  <path fill="currentColor" d="M4 14a2 2 0 0 0 2 2h8a2 2 0 1 0 0-4h-1a1 1 0 1 0 0 2h1H6a2 2 0 0 0-2 2Z"/>
                </svg>
                Download CSV
              </button>
            </div>

            <div class="note muted mt-3">
              Having trouble? <a class="link" href="mailto:support@vanishedbrands.com">Resend link</a>
            </div>
          </div>
        `);

        // Wire the guarded click
        const btn = $('btn-download');
        if (!btn) return;
        const handler = withDebounce(async () => {
          const token = btn.getAttribute('data-token');
          await redeemOnce({ token, confirmIfLast: true, updateUI: true, openNewTab: true });
        }, 1500);
        btn.addEventListener('click', handler);
      }

      // Redeem once via JSON POST to get counts + URL; optionally open new tab
      async function redeemOnce({ token, confirmIfLast=false, openNewTab=true, updateUI=false }){
        // First, peek at counts (without auto-following redirect) via POST
        const dl = await httpJSON('/.netlify/functions/download-link', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ token })
        });

        if (!dl.ok || !dl.data?.url) {
          const msg = (dl.data && (dl.data.message || dl.data.error)) || ('Download link error (HTTP ' + (dl.status || '?') + ').');
          setHTML('result', `<p class="err">${msg}</p>`);
          return { ok:false, dl };
        }

        // If this redemption would be the *last*, ask for confirmation
        if (confirmIfLast && dl.data.last === true) {
          const proceed = window.confirm("This will use your last allowed download. Continue?");
          if (!proceed) {
            // Don't open the URL; don't consume another use.
            // (Note: the POST has already incremented useCount; if you want preflight w/o consuming,
            // you’d need a separate “peek” endpoint. Given current server, we consume here.)
          }
        }

        window.__expiresAt = dl.data.expiresAt;

        // Open signed URL (auto-download). Use target=_blank to avoid replacing /buy.
        if (openNewTab) {
          try { window.open(dl.data.url, '_blank', 'noopener'); } catch(_) {}
        } else {
          window.location.href = dl.data.url;
        }

        // Update the UI with fresh remaining counter
        if (updateUI) {
          renderDownloadUI({
            token,
            uses: dl.data.uses,
            maxUses: dl.data.maxUses,
            last: dl.data.last,
            autoMessage: null
          });
        }

        return { ok:true, dl };
      }

      // ---------- Main (PayPal) ----------
      window.addEventListener('load', () => {
        const fallbackTimer = setTimeout(() => hideLoading(), 8000);
        if (!window.paypal || !window.paypal.Buttons) return;

        paypal.Buttons({
          style: { layout:'vertical', shape:'rect', color:'gold', label:'paypal', tagline:false },
          onInit(){ hideLoading(); setHTML('result', ''); },

          async createOrder() {
            const res = await httpJSON('/.netlify/functions/paypal-create-order');
            if (!res.ok || !res.data?.id) {
              setHTML('result', '<p class="err">Could not create order. Please refresh and try again.</p>');
              throw new Error('createOrder failed');
            }
            return res.data.id;
          },

          async onApprove(data) {
            setHTML('result', '<p class="muted">Finalizing payment…</p>');

            const cap = await httpJSON('/.netlify/functions/paypal-capture-order', {
              method:'POST',
              headers:{ 'Content-Type':'application/json' },
              body: JSON.stringify({ orderID: data.orderID })
            });

            if (!cap.ok || !cap.data?.ok || !cap.data?.token) {
              hideLoading();
              const msg = (cap.data && cap.data.error) ? cap.data.error : ('Capture failed (HTTP ' + (cap.status || '?') + ').');
              setHTML('result', '<p class="err">Something went wrong (capture). ' + msg + '</p>');
              return;
            }

            hideLoading();

            const token = cap.data.token;

            // Avoid accidental re-autostart if user reloads:
            const startKey = '__auto_started_' + token;
            const alreadyAutoStarted = sessionStorage.getItem(startKey) === '1';

            let autoMsg = '';
            if (!alreadyAutoStarted) {
              // Auto-start once; count will increment server-side
              const r = await redeemOnce({ token, confirmIfLast:false, openNewTab:true, updateUI:false });
              if (r.ok && r.dl?.data) {
                const remaining = Math.max(0, r.dl.data.maxUses - r.dl.data.uses);
                autoMsg = `Download started. You have ${remaining} more downloads available for the next 3 days.`;
                sessionStorage.setItem(startKey, '1');
                // Render UI with fresh counts
                renderDownloadUI({
                  token,
                  uses: r.dl.data.uses,
                  maxUses: r.dl.data.maxUses,
                  last: r.dl.data.last,
                  autoMessage: autoMsg
                });
              } else {
                // Auto failed → show button with a helpful message
                renderDownloadUI({
                  token,
                  uses: 0,
                  maxUses: 3,
                  last: false,
                  autoMessage: 'Auto-download didn’t start. Click the button to try again.'
                });
              }
            } else {
              // If somehow already auto-started, just render the guarded UI
              renderDownloadUI({ token, uses: 1, maxUses: 3, last:false, autoMessage:'' });
            }

            // Make sure the success UI is visible
            const resEl = $('result');
            if (resEl) resEl.scrollIntoView({ behavior:'smooth', block:'center' });
          },

          onError(err) {
            hideLoading();
            setHTML('result', '<p class="err">PayPal error: ' + (err?.message || String(err)) + '</p>');
          }
        })
        .render('#paypal-btns')
        .then(() => { clearTimeout(fallbackTimer); hideLoading(); })
        .catch(() => { clearTimeout(fallbackTimer); hideLoading(); });
      });
    </script>
  )}
</Base>
