---
// src/pages/buy.astro
import Base from "../layouts/Base.astro";

const CLIENT_ID =
  import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || import.meta.env.PAYPAL_CLIENT_ID || "";
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox").toLowerCase();

const TITLE = "Buy the Full CSV";
const DESCRIPTION = "Secure checkout via PayPal. Receive a one-time download link after purchase.";
const PRICE = "9.00"; // USD
const CANONICAL = Astro.site ? new URL("/buy", Astro.site).href : "/buy";
---

<Base title={TITLE} description={DESCRIPTION}>
  <!-- Head: PayPal SDK + small style reset for the button container -->
  <Fragment slot="head">
    {CLIENT_ID && (
      <script
        src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons&commit=true`}
        defer
      />
    )}
    <link rel="canonical" href={CANONICAL} />
    <meta property="og:url" content={CANONICAL} />
    <meta property="og:title" content={TITLE} />
    <meta property="og:description" content={DESCRIPTION} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={TITLE} />
    <meta name="twitter:description" content={DESCRIPTION} />
    <style>
      /* Keep PayPal's outer wrappers transparent (outside the iframe) */
      #paypal-btns > div,
      #paypal-btns .paypal-buttons,
      #paypal-btns .paypal-button-row,
      #paypal-btns .paypal-button-container,
      #paypal-btns iframe { background: transparent !important; }
    </style>
  </Fragment>

  <!-- Match /data.astro nav chips -->
  <nav class="mb-4 flex flex-wrap gap-2">
    <a href="/" class="chip focus-ring">← Home</a>
    <a href="/az/" class="chip focus-ring">A–Z</a>
    <a href="/decade/" class="chip focus-ring">Decades</a>
  </nav>

  <h1 class="text-2xl md:text-3xl font-bold mb-2">{TITLE}</h1>
  <p class="text-slate-700 dark:text-slate-300 mb-4">
    Get instant access to the full dataset (CSV). Price:
    <strong class="font-semibold text-slate-900 dark:text-slate-100">${PRICE} USD</strong>.
  </p>

  {!CLIENT_ID ? (
    <p class="text-red-600 dark:text-red-400">
      Missing PayPal client ID.
      Set <code>PUBLIC_PAYPAL_CLIENT_ID</code> (and <code>PUBLIC_PAYPAL_ENV</code>) in your environment and redeploy.
    </p>
  ) : (
    <>
      <!-- Always-white checkout card so PayPal iframe looks intentional in both themes -->
      <section class="rounded-xl border p-4 bg-white shadow-sm text-slate-900 border-slate-200 dark:border-slate-700">
        <h2 class="sr-only">Payment</h2>

        <div id="paypal-loading" role="status" aria-live="polite"
             class="text-sm text-slate-600 text-center">Loading…</div>

        <div class="mt-3 flex justify-center">
          <div id="paypal-btns" class="w-full max-w-[480px]"></div>
        </div>
      </section>

      <div id="result" class="mt-4 text-sm text-slate-700 dark:text-slate-300"></div>
      <p class="mt-2 text-sm text-slate-700 dark:text-slate-300">
        Payments are processed securely by PayPal. You’ll receive a one-time download link immediately after purchase.
      </p>
      <p class="mt-1 text-center text-xs text-slate-500 dark:text-slate-400">
        Powered by <span class="font-semibold">PayPal</span>
      </p>
    </>
  )}

  {CLIENT_ID && (
    <script is:inline>
      // ---------- helpers ----------
      const $ = (id) => document.getElementById(id);
      const setText = (id, t) => { const el = $(id); if (el) el.textContent = t; };
      const setHTML = (id, html) => { const el = $(id); if (el) el.innerHTML = html; };

      async function httpJSON(url, opts){
        const r = await fetch(url, opts);
        let data = null;
        try { data = await r.json(); } catch {}
        return { ok: r.ok, status: r.status, data };
      }

      function showError(where, payload){
        console.error(`[PayPal] ${where} error:`, payload);
        const msg = payload?.message || payload?.error || `Something went wrong (${where}).`;
        setHTML('result', `<span class="text-red-600 dark:text-red-400">${msg}</span>`);
      }

      function readyPayPal(){
        return new Promise((res, rej) => {
          let tries = 0;
          const iv = setInterval(() => {
            tries++;
            if (window.paypal && window.paypal.Buttons) { clearInterval(iv); res(); }
            else if (tries > 200) { clearInterval(iv); rej(new Error('PayPal SDK not loaded')); }
          }, 50);
        });
      }

      (async () => {
        try {
          setText('paypal-loading', 'Loading…');

          // Wait for the SDK to be present
          await readyPayPal();

          await paypal.Buttons({
            style: { layout: 'vertical', shape: 'rect', color: 'gold', label: 'paypal', tagline: false },

            onInit() {
              setText('paypal-loading', '');
              const l = $('paypal-loading'); if (l) l.style.display = 'none';
              setText('result', '');
            },

            // Explicit POST to your Netlify function (avoids some GET/CORS blockers)
            async createOrder() {
              const { ok, status, data } = await fetch('/.netlify/functions/paypal-create-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
              }).then(async r => ({ ok: r.ok, status: r.status, data: await r.json().catch(()=>null) }));

              if (!ok || !data?.id) {
                console.error('createOrder failed', status, data);
                throw new Error('createOrder failed');
              }
              return data.id;
            },


            async onApprove(data) {
              setText('result', 'Finalizing payment…');
              const cap = await httpJSON('/.netlify/functions/paypal-capture-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderID: data.orderID })
              });

              if (!cap.ok || !cap.data?.ok || !cap.data?.token) {
                showError('capture', { status: cap.status, ...cap.data });
                return;
              }

              const dl = await httpJSON('/.netlify/functions/download-link', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ token: cap.data.token })
              });

              if (!dl.ok || !dl.data?.url) {
                showError('download-link', { status: dl.status, ...dl.data });
                return;
              }

              setHTML('result',
                `<a class="underline text-blue-600 dark:text-blue-300 hover:no-underline focus:outline-none focus:ring-4 focus:ring-offset-2 focus:ring-blue-600 dark:focus:ring-blue-400 focus:ring-offset-white dark:focus:ring-offset-[#0b0b0f] rounded"
                    href="${dl.data.url}" rel="noopener">Click to download your CSV</a>`
              );
            },

            onCancel(data) {
              setHTML('result', '<span class="text-slate-700 dark:text-slate-300">Checkout canceled.</span>');
              console.warn('[PayPal] onCancel', data);
            },

            onError(err) {
              showError('buttons', { message: err?.message || String(err) });
            }
          }).render('#paypal-btns');

        } catch (e) {
          showError('bootstrap', { message: e?.message || String(e) });
          setText('paypal-loading', '');
        }
      })();
    </script>
  )}
</Base>
