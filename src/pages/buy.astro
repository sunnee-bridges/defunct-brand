---
import Base from "../layouts/Base.astro";

const CLIENT_ID =
  import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || import.meta.env.PAYPAL_CLIENT_ID || "";
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox").toLowerCase();

// Display-only; server controls the real price via PRICE_USD
const PRICE_LABEL = import.meta.env.PUBLIC_PRICE_LABEL || "$9";

const title = "Buy the Full CSV";
const description = "Secure checkout via PayPal. Receive a one-time download link after purchase.";
---

<Base title={title} description={description}>
  <Fragment slot="head">
    {CLIENT_ID && (
      <script
        src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons&disable-funding=paylater,card,credit`}
        defer
      />
    )}
    <style is:global>
      /* Make PayPal wrappers transparent so it looks good in light/dark */
      #paypal-btns > div,
      #paypal-btns .paypal-buttons,
      #paypal-btns .paypal-button-row,
      #paypal-btns .paypal-button-container,
      #paypal-btns iframe { background: transparent !important; }

      .link { color:#2563eb; text-decoration:underline; }
      .btn {
        display:inline-flex; align-items:center; gap:.5rem;
        padding:.5rem 1rem; border-radius:9999px;
        background:#059669; color:#fff; text-decoration:none;
        transition:background-color .15s ease-in-out, opacity .15s;
      }
      .btn:hover { background:#047857; }
      .btn:active { background:#065f46; }
      .btn[aria-disabled="true"] { opacity:.6; pointer-events:none; }

      .muted { color:#6b7280; }
      .ok { color:#065f46; }
      .err { color:#b91c1c; }
      .note { font-size:.875rem; }
      .chip { border:1px solid #cbd5e1; padding:.25rem .5rem; border-radius:9999px; }
    </style>
  </Fragment>

  <nav class="mb-4 flex flex-wrap gap-2">
    <a href="/" class="chip">← Home</a>
    <a href="/az/" class="chip">A–Z</a>
    <a href="/decade/" class="chip">Decades</a>
  </nav>

  <h1 class="text-2xl md:text-3xl font-bold mb-2">{title}</h1>
  <p class="text-slate-700 dark:text-slate-300 mb-4">
    Get instant access to the full dataset (CSV). Price:
    <strong class="font-semibold text-slate-900 dark:text-slate-100">{PRICE_LABEL} USD</strong>.
  </p>

  {!CLIENT_ID ? (
    <p class="err">
      Missing PayPal client ID.
      Set <code>PUBLIC_PAYPAL_CLIENT_ID</code> (and <code>PUBLIC_PAYPAL_ENV</code>) in your env and redeploy.
    </p>
  ) : (
    <>
      <section class="rounded-xl border p-4 bg-white shadow-sm text-slate-900 border-slate-200 dark:border-slate-700">
        <h2 class="sr-only">Payment</h2>

        <div id="paypal-loading" role="status" aria-live="polite"
             class="text-sm text-slate-600 text-center">Loading…</div>

        <div class="mt-3 flex justify-center">
          <div id="paypal-btns" class="w-full max-w-[480px]"></div>
        </div>
      </section>

      <!-- Success / actions / messages -->
      <div id="result" class="mt-4" aria-live="polite"></div>

      <p class="mt-3 text-sm text-slate-700 dark:text-slate-300">
        Payments are processed securely by PayPal. You’ll receive a one-time download link immediately after purchase.
      </p>

      <p class="mt-1 text-center text-xs text-slate-500 dark:text-slate-400">
        ENV: {ENV} • Powered by <span class="font-semibold">PayPal</span>
      </p>
    </>
  )}

  {CLIENT_ID && (
    <script is:inline>
      // ---------- Helpers ----------
      const $ = (id) => document.getElementById(id);
      const setHTML = (id, html) => { const el = $(id); if (el) el.innerHTML = html; };
      const hideLoading = (msg) => {
        const el = $('paypal-loading');
        if (!el) return;
        if (msg !== undefined) el.textContent = msg;
        el.style.display = 'none';
      };
      async function httpJSON(url, opts){
        const r = await fetch(url, opts);
        let data = null;
        try { data = await r.json(); } catch {}
        return { ok: r.ok, status: r.status, data };
      }

      // Render the success card with the green download button (same-tab link)
      function renderButton(token, remainingLineHtml = ""){
        const dlPath = '/download/' + token;
        const icon = `
          <svg viewBox="0 0 24 24" width="20" height="20" aria-hidden="true" focusable="false">
            <path fill="currentColor"
              d="M3 16.5V18a2.25 2.25 0 0 0 2.25 2.25h13.5A2.25 2.25 0 0 0 21 18v-1.5a.75.75 0 0 0-1.5 0V18c0 .414-.336.75-.75.75H5.25A.75.75 0 0 1 4.5 18v-1.5a.75.75 0 0 0-1.5 0ZM12.75 3a.75.75 0 0 0-1.5 0v9.19l-3.22-3.22a.75.75 0 1 0-1.06 1.06l4.5 4.5a.75.75 0 0 0 1.06 0l4.5-4.5a.75.75 0 1 0-1.06-1.06l-3.22 3.22V3Z"/>
          </svg>
        `;

        setHTML('result', `
          <div class="rounded-lg border border-slate-200 dark:border-slate-700 p-4 bg-white dark:bg-slate-900">
            <div class="ok">✅ Preparing your download…</div>
            ${remainingLineHtml}
            <div class="mt-3">
              <a id="btn-download" href="${dlPath}" class="btn" role="button" rel="noopener">
                ${icon}
                <span>Download CSV</span>
              </a>
            </div>
            <div class="note muted mt-3">
              Having trouble? <a class="link" href="mailto:support@vanishedbrands.com">Resend link</a>
            </div>
          </div>
        `);

        // Debounce the button to avoid double-clicks wasting uses
        const btn = $('btn-download');
        if (btn) {
          let inFlight = false;
          btn.addEventListener('click', (ev) => {
            if (inFlight) { ev.preventDefault(); return; }
            inFlight = true;
            btn.setAttribute('aria-disabled', 'true');
            setTimeout(() => { inFlight = false; btn.removeAttribute('aria-disabled'); }, 2500);
          });
        }

        const resEl = $('result');
        if (resEl) resEl.scrollIntoView({ behavior:'smooth', block:'center' });
      }

      // Fetch remaining counts/expiry WITHOUT consuming a use
      async function peekRemaining(token){
        // Your download-link function must support: GET ?peek=1&token=...
        const url = '/.netlify/functions/download-link?peek=1&token=' + encodeURIComponent(token);
        const r = await httpJSON(url, { method:'GET', headers:{ 'Accept':'application/json' }});
        if (!r.ok || !r.data) return null;

        const remaining = (r.data.remaining != null)
          ? r.data.remaining
          : Math.max(0, (r.data.maxUses || 0) - (r.data.uses || 0));
        const expires = r.data.expiresAt ? new Date(r.data.expiresAt).toLocaleString() : "";
        const lastNote = r.data.last
          ? '<div class="note muted mt-1">Heads up: that was your last allowed download.</div>'
          : '';

        return {
          line: `
            <div class="note muted mt-1">
              Remaining downloads: <strong>${remaining}</strong> of <strong>${r.data.maxUses}</strong>.
              ${expires ? ` Link valid until <time>${expires}</time>.` : ""}
            </div>
            ${lastNote}
          `
        };
      }

      // ---------- Main (PayPal) ----------
      window.addEventListener('load', () => {
        const fallbackTimer = setTimeout(() => hideLoading(), 8000);
        if (!window.paypal || !window.paypal.Buttons) return;

        paypal.Buttons({
          style: { layout:'vertical', shape:'rect', color:'gold', label:'paypal', tagline:false },

          onInit(){ hideLoading(); setHTML('result', ''); },

          async createOrder() {
            const res = await httpJSON('/.netlify/functions/paypal-create-order');
            if (!res.ok || !res.data?.id) {
              setHTML('result', '<p class="err">Could not create order. Please refresh and try again.</p>');
              throw new Error('createOrder failed');
            }
            return res.data.id;
          },

          async onApprove(data) {
            setHTML('result', '<p class="muted">Finalizing payment…</p>');

            const cap = await httpJSON('/.netlify/functions/paypal-capture-order', {
              method:'POST',
              headers:{ 'Content-Type':'application/json' },
              body: JSON.stringify({ orderID: data.orderID })
            });

            if (!cap.ok || !cap.data?.ok || !cap.data?.token) {
              hideLoading();
              const msg = (cap.data && cap.data.error) ? cap.data.error : ('Capture failed (HTTP ' + (cap.status || '?') + ').');
              setHTML('result', '<p class="err">Something went wrong (capture). ' + msg + '</p>');
              return;
            }

            hideLoading();

            const token = cap.data.token;
            const dlPath = '/download/' + token;

            // 1) Render the visible button immediately (same-tab link)
            renderButton(token, '');

            // 2) AUTO-DOWNLOAD with popup-primer (new tab first, else same-tab fallback)
            // Open a blank tab synchronously (gesture context), then navigate it when URL is ready
            let primer = null;
            try { primer = window.open('', '_blank', 'noopener'); } catch(_) {}
            try {
              if (primer && !primer.closed) {
                primer.location = dlPath;   // new-tab auto download
              } else {
                // Final fallback: same-tab navigation if opener was blocked
                window.location.href = dlPath;
              }
            } catch (_) {
              // If anything odd happens with the primer, fall back to same-tab navigation
              window.location.href = dlPath;
            }

            // 3) Background peek: show remaining count without consuming a use
            try {
              const peek = await peekRemaining(token);
              if (peek && peek.line) renderButton(token, peek.line);
            } catch (_) { /* ignore background errors */ }
          },

          onError(err) {
            hideLoading();
            setHTML('result', '<p class="err">PayPal error: ' + (err?.message || String(err)) + '</p>');
          }
        })
        .render('#paypal-btns')
        .then(() => { clearTimeout(fallbackTimer); hideLoading(); })
        .catch(() => { clearTimeout(fallbackTimer); hideLoading(); });
      });
    </script>
  )}
</Base>
