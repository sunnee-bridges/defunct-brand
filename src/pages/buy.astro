---
// src/pages/buy.astro

const CLIENT_ID =
  import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || import.meta.env.PAYPAL_CLIENT_ID || "";
const ENV = (import.meta.env.PUBLIC_PAYPAL_ENV || "sandbox").toLowerCase();
const title = "Buy the Full CSV";
const price = "9.00"; // USD
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    {CLIENT_ID && (
      <script
        src={`https://www.paypal.com/sdk/js?client-id=${CLIENT_ID}&currency=USD&intent=capture&components=buttons`}
        defer
      />
    )}

    <style>
      :root{--fg:#111827;--muted:#6b7280;}
      @media (prefers-color-scheme: dark){:root{--fg:#e5e7eb;--muted:#9ca3af;}}
      body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,'Helvetica Neue',Arial,sans-serif;margin:0;padding:2rem;color:var(--fg);}
      .wrap{max-width:720px;margin:0 auto;}
      .muted{color:var(--muted);}
      .link{color:#2563eb;text-decoration:underline;}
      #result{margin-top:1rem}
      .note{font-size:.875rem;margin-top:.5rem}
      .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
    </style>
  </head>
  <body>
    <div class="wrap">
      <h1>{title}</h1>
      <p>
        Get instant access to the full dataset (CSV). Price:
        <strong>${price} USD</strong>.
      </p>

      {!CLIENT_ID ? (
        <p style="color:#b91c1c">
          Missing PayPal client ID.
          Set <code>PUBLIC_PAYPAL_CLIENT_ID</code> (and <code>PUBLIC_PAYPAL_ENV</code>) in your env and redeploy.
        </p>
      ) : (
        <>
          <div id="paypal-loading" aria-live="polite">Loading…</div>
          <div id="paypal-btns"></div>
          <div id="result" class="note muted"></div>
          <p class="note muted">
            Payments are processed securely by PayPal. You’ll receive a one-time download link immediately after purchase.
          </p>
        </>
      )}
    </div>

    {CLIENT_ID && (
      <script is:inline>
        // Small helpers
        function $(id){ return document.getElementById(id); }
        function hideLoading(msg){
          const el = $('paypal-loading');
          if (!el) return;
          if (msg !== undefined) el.textContent = msg;
          el.style.display = 'none';
        }
        function setResult(text){
          const el = $('result');
          if (!el) return;
          el.textContent = text || '';
        }
        async function httpJSON(url, opts){
          const r = await fetch(url, opts);
          let data = null;
          try { data = await r.json(); } catch {}
          return { ok: r.ok, status: r.status, data };
        }

        window.addEventListener('load', () => {
          // Fallback if SDK blocked by extensions; hide after ~8s
          const fallbackTimer = setTimeout(() => hideLoading(), 8000);

          if (!window.paypal || !window.paypal.Buttons) {
            // SDK will hydrate shortly; render() will also call hideLoading
            return;
          }

          paypal.Buttons({
            style: { layout: 'vertical', shape: 'rect', color: 'gold', label: 'paypal' },

            onInit() {
              hideLoading();
              setResult('');
            },

            async createOrder() {
              // Ask server to create the Order
              const { ok, data } = await httpJSON('/.netlify/functions/paypal-create-order');
              if (!ok || !data?.id) {
                setResult('Could not create order. Please refresh and try again.');
                throw new Error('createOrder failed');
              }
              return data.id;
            },

            async onApprove(data) {
              setResult('Finalizing payment…');

              // Capture on server
              const cap = await httpJSON('/.netlify/functions/paypal-capture-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderID: data.orderID })
              });

              if (!cap.ok || !cap.data?.ok || !cap.data?.token) {
                hideLoading();
                const msg = cap.data?.error || `Capture failed (HTTP ${cap.status}).`;
                setResult(msg);
                return;
              }

              // Redeem token → presigned URL
              const dl = await httpJSON('/.netlify/functions/download-link', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ token: cap.data.token })
              });

              hideLoading();

              if (!dl.ok || !dl.data?.url) {
                const msg = dl.data?.error || `Download link error (HTTP ${dl.status}).`;
                setResult(msg);
                return;
              }

              // Render the “Click to download” link
              const a = document.createElement('a');
              a.href = dl.data.url;
              a.textContent = 'Click to download your CSV';
              a.className = 'link';
              a.rel = 'noopener';
              const result = $('result');
              if (result) { result.innerHTML = ''; result.appendChild(a); }
            },

            onError(err) {
              hideLoading();
              setResult('PayPal error: ' + (err?.message || String(err)));
            }
          })
          .render('#paypal-btns')
          .then(() => { clearTimeout(fallbackTimer); hideLoading(); })
          .catch(() => { clearTimeout(fallbackTimer); hideLoading(); });
        });
      </script>
    )}
  </body>
</html>
