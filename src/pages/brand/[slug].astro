---
// src/pages/brand/[slug].astro
/**
 * Static generation for /brand/[slug]
 * Use import.meta.glob for both path generation and data loading.
 */

import Base from "../../layouts/Base.astro";
import ExploreMore from "../../components/ExploreMore.astro";
import AffiliateDisclosure from "../../components/AffiliateDisclosure.astro";

/** Generate paths for each brand file */
export function getStaticPaths() {
  // Define the glob INSIDE this function to avoid scope issues
  const modules = import.meta.glob("/src/content/brands/*.json");
  return Object.keys(modules).map((p) => {
    const slug = (p.split("/").pop() || "")
      .replace(/\.public\.json$/i, "") // tolerate legacy names
      .replace(/\.json$/i, "");
    return { params: { slug } };
  });
}

/** Eagerly load all brand JSON for lookup at render time */
const brandModules = import.meta.glob("/src/content/brands/*.json", {
  eager: true,
  import: "default",
}) as Record<string, any>;

/** Resolve the current brand from the preloaded map */
const { slug } = Astro.params;
const modKey = `/src/content/brands/${slug}.json`;
const brand = (brandModules[modKey] as any) ?? null;
const notFound = !brand;

/* --- SEO / Canonical (use Base props to emit tags) --- */
let pageTitle = "Page not found";
let pageDesc  = "Try another page or browse the full list.";
let canonical = Astro.site ? new URL("/az/", Astro.site).href : "/az/";

let jsonLdBlocks: any[] = [];
let extraHead: any = null; // we'll render OG/Twitter meta via Base's <slot name="head">

if (!notFound) {
  const activeStr = `${brand.active?.start ?? "?"}\u2013${brand.active?.end ?? "?"}`;

  // Title/description tuned for intent (“what happened to …”)
  pageTitle = `What Happened to ${brand.brand}? (Timeline & Fate)`;
  pageDesc  = `${brand.brand}: ${brand.fate || "Defunct"}; active ${activeStr}. ${brand.summary ?? ""}`.trim();

  const brandPath = `/brand/${encodeURIComponent(brand.slug || slug)}/`;
  canonical = Astro.site ? new URL(brandPath, Astro.site).href : brandPath;

  // ---- OG/Twitter image
  // If you generate per-brand OG images, set a predictable path; else fall back to a site-wide image.
  // Example per-brand: `/og/brand/<slug>.png` — only referenced; won’t 404 if you don’t create them yet.
  const siteOrigin = Astro.site?.origin || "https://vanishedbrands.com";
  const perBrandOg  = `/og/brand/${encodeURIComponent(brand.slug || slug)}.png`;
  const siteOg      = `/og/site.png`;
  const ogImage     = new URL(perBrandOg, siteOrigin).toString();
  const ogImageAlt  = `What happened to ${brand.brand}?`;
  const twitterCard = "summary_large_image";

  // ---- Enriched Brand JSON-LD
  // Add url + sameAs (e.g., Wikipedia) if available.
  const sameAs: string[] = [];
  if (brand?.links?.wikipedia) sameAs.push(String(brand.links.wikipedia));

  const brandLd = {
    ["@context"]: "https://schema.org",
    ["@type"]: "Brand",
    name: brand.brand,
    description: brand.summary || undefined,
    url: canonical,
    sameAs: sameAs.length ? sameAs : undefined,
    foundingDate: brand.active?.start || undefined,
    dissolutionDate: brand.active?.end || undefined,
    category: brand.category || undefined,
  };

  // A WebPage node tying to the brand as mainEntity helps some SEO analyzers
  const webPageLd = {
    ["@context"]: "https://schema.org",
    ["@type"]: "WebPage",
    url: canonical,
    name: pageTitle,
    description: pageDesc,
    mainEntity: { ["@id"]: canonical + "#brand" },
    primaryImageOfPage: {
      ["@type"]: "ImageObject",
      url: ogImage,
    },
  };

  // Give the Brand @id so WebPage.mainEntity can point to it
  (brandLd as any)["@id"] = canonical + "#brand";

  const breadcrumbsLd = {
    ["@context"]: "https://schema.org",
    ["@type"]: "BreadcrumbList",
    itemListElement: [
      { ["@type"]: "ListItem", position: 1, name: "Home", item: Astro.site ? new URL("/", Astro.site).href : "/" },
      { ["@type"]: "ListItem", position: 2, name: "A–Z",  item: Astro.site ? new URL("/az/", Astro.site).href : "/az/" },
      { ["@type"]: "ListItem", position: 3, name: brand.brand, item: canonical },
    ],
  };

  jsonLdBlocks = [brandLd, webPageLd, breadcrumbsLd];

  // Extra head meta (no UI change)
  extraHead = (
    <Fragment slot="head">
      {/* Rich result friendly preview hints */}
      <meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1" />

      {/* OG / Twitter */}
      <meta property="og:type" content="website" />
      <meta property="og:site_name" content="Vanished Brands" />
      <meta property="og:image" content={ogImage} />
      <meta property="og:image:alt" content={ogImageAlt} />
      <meta property="og:image:width" content="1200" />
      <meta property="og:image:height" content="630" />

      <meta name="twitter:card" content={twitterCard} />
      <meta name="twitter:image" content={ogImage} />
      <meta name="twitter:image:alt" content={ogImageAlt} />
    </Fragment>
  );
}
---

<Base
  title={pageTitle}
  description={pageDesc}
  canonical={canonical}
  jsonLd={jsonLdBlocks}
>
  {/* Keep robots noindex for not-found */}
  {notFound && (
    <Fragment slot="head">
      <meta name="robots" content="noindex,follow" />
    </Fragment>
  )}

  {/* Extra meta for valid pages (no UI change) */}
  {!notFound && extraHead}

  {notFound ? (
    <>
      <nav class="flex flex-wrap items-center gap-2 my-3">
        <a href="/" class="chip focus-ring">← Home</a>
        <a href="/az/" class="chip focus-ring">Browse A–Z</a>
      </nav>
      <h1 class="text-2xl md:text-3xl font-bold mb-2">Page not found</h1>
      <p class="text-slate-600 dark:text-slate-300">Try another page or browse the full list.</p>
    </>
  ) : (
    <>
      <nav class="flex flex-wrap items-center gap-2 my-3">
        <a href="/" class="chip focus-ring">← Home</a>
        <a href="/az/" class="chip focus-ring">Browse A–Z</a>
      </nav>

      <h1 id="brand-title" class="text-2xl md:text-3xl font-bold mb-2">
        What Happened to {brand.brand}?
      </h1>

      <p class="text-gray-800 dark:text-slate-200">
        <strong>At a glance:</strong>
        {brand.active?.start ? ` Founded: ${brand.active.start}.` : "" }
        {brand.active?.end ? ` Defunct: ${brand.active.end}.` : "" }
        {brand.fate ? ` Fate: ${brand.fate}.` : "" }
        {brand.category ? ` Category: ${brand.category}.` : "" }
        {brand.country ? ` Country: ${brand.country}.` : "" }
      </p>

      {brand.summary && (
        <p class="mt-3 text-gray-700 dark:text-slate-300">{brand.summary}</p>
      )}

      <ExploreMore brand={brand} />
      <AffiliateDisclosure />
    </>
  )}
</Base>
