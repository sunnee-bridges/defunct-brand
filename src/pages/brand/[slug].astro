---
// src/pages/brand/[slug].astro

/**
 * Static generation for /brand/[slug]
 * Use import.meta.glob for both path generation and data loading.
 */
import Base from "../../layouts/Base.astro";
import ExploreMore from "../../components/ExploreMore.astro";
import AffiliateDisclosure from "../../components/AffiliateDisclosure.astro";
import LearnMore from "../../components/LearnMore.astro";

/** Generate paths for each brand file */
export function getStaticPaths() {
  const modules = import.meta.glob("/src/content/brands/*.json");
  return Object.keys(modules).map((p) => {
    const slug = (p.split("/").pop() || "")
      .replace(/\.public\.json$/i, "") // tolerate legacy names
      .replace(/\.json$/i, "");
    return { params: { slug } };
  });
}

/** Eagerly load all brand JSON for lookup at render time */
const brandModules = import.meta.glob("/src/content/brands/*.json", {
  eager: true,
  import: "default",
}) as Record<string, any>;

/** Resolve the current brand from the preloaded map */
const { slug } = Astro.params;
const modKey = `/src/content/brands/${slug}.json`;
const brand = (brandModules[modKey] as any) ?? null;
const notFound = !brand;

/* --- Helpers --- */
function catToPath(cat?: string) {
  if (!cat) return null;
  const s = cat.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "");
  return `/category/${encodeURIComponent(s)}/`;
}
function titleFromSlug(s: string) {
  return s
    .replace(/-/g, " ")
    .replace(/\b\w/g, (c) => c.toUpperCase());
}

/* --- SEO / Canonical (use Base props to emit tags) --- */
let pageTitle = "Page not found";
let pageDesc  = "Try another page or browse the full list.";
let canonical = Astro.site ? new URL("/az/", Astro.site).href : "/az/";

let jsonLdBlocks: any[] = [];
let ogImage = "";
let ogImageAlt = "";
let twitterCard = "summary_large_image";

/* LearnMore link buckets (built only for valid brands) */
type LinkItem = { href: string; label: string; external?: boolean; rel?: string };
let internalLinks: LinkItem[] = [];
let authorityLinks: LinkItem[] = [];
let mediaLinks: LinkItem[] = [];

if (!notFound) {
  const activeStr = `${brand.active?.start ?? "?"}\u2013${brand.active?.end ?? "?"}`;

  // Intent-tuned title/description
  pageTitle = `What Happened to ${brand.brand}? (Timeline & Fate)`;
  pageDesc  = `${brand.brand}: ${brand.fate || "Defunct"}; active ${activeStr}. ${brand.summary ?? ""}`.trim();

  const brandPath = `/brand/${encodeURIComponent(brand.slug || slug)}/`;
  canonical = Astro.site ? new URL(brandPath, Astro.site).href : brandPath;

  // OG/Twitter image (per-brand path; fallback to site root origin)
  const siteOrigin = Astro.site?.origin || "https://vanishedbrands.com";
  const perBrandOg  = `/og/brand/${encodeURIComponent(brand.slug || slug)}.png`;
  ogImage     = new URL(perBrandOg, siteOrigin).toString();
  ogImageAlt  = `What happened to ${brand.brand}?`;

  // Enriched Brand JSON-LD
  const sameAs: string[] = [];
  if (brand?.links?.wikipedia) sameAs.push(String(brand.links.wikipedia));

  const brandLd = {
    ["@context"]: "https://schema.org",
    ["@type"]: "Brand",
    ["@id"]: canonical + "#brand",
    name: brand.brand,
    description: brand.summary || undefined,
    url: canonical,
    sameAs: sameAs.length ? sameAs : undefined,
    foundingDate: brand.active?.start || undefined,
    dissolutionDate: brand.active?.end || undefined,
    category: brand.category || undefined,
  };

  // WebPage node tying to the Brand
  const webPageLd = {
    ["@context"]: "https://schema.org",
    ["@type"]: "WebPage",
    url: canonical,
    name: pageTitle,
    description: pageDesc,
    mainEntity: { ["@id"]: canonical + "#brand" },
    primaryImageOfPage: {
      ["@type"]: "ImageObject",
      url: ogImage,
    },
  };

  const breadcrumbsLd = {
    ["@context"]: "https://schema.org",
    ["@type"]: "BreadcrumbList",
    itemListElement: [
      { ["@type"]: "ListItem", position: 1, name: "Home", item: Astro.site ? new URL("/", Astro.site).href : "/" },
      { ["@type"]: "ListItem", position: 2, name: "A–Z",  item: Astro.site ? new URL("/az/", Astro.site).href : "/az/" },
      { ["@type"]: "ListItem", position: 3, name: brand.brand, item: canonical },
    ],
  };

  jsonLdBlocks = [brandLd, webPageLd, breadcrumbsLd];

  // ---------- LearnMore links ----------
  internalLinks = [{ href: "/az/", label: "Browse A–Z" }];

  // Category link (if present)
  const catPath = catToPath(brand?.category);
  if (catPath) internalLinks.push({ href: catPath, label: `More in ${brand.category}` });

  // Topic hub links (auto-surface from brand.topics)
  if (Array.isArray(brand?.topics) && brand.topics.length > 0) {
    // Link to the first topic with a friendly label
    const firstTopic = String(brand.topics[0]);
    internalLinks.push({
      href: `/topics/${encodeURIComponent(firstTopic)}/`,
      label: `More in ${titleFromSlug(firstTopic)}`
    });

    // (Optional) also surface a second topic if you want:
    if (brand.topics[1]) {
      const t2 = String(brand.topics[1]);
      internalLinks.push({
        href: `/topics/${encodeURIComponent(t2)}/`,
        label: `More in ${titleFromSlug(t2)}`
      });
    }
  }

  // Authority / external references
  if (brand?.links?.wikipedia)
    authorityLinks.push({ href: String(brand.links.wikipedia), label: `${brand.brand} on Wikipedia`, external: true });

  if (brand?.links?.official)
    authorityLinks.push({ href: String(brand.links.official), label: "Official site (archived)", external: true, rel: "noopener nofollow" });

  if (brand?.links?.wayback)
    authorityLinks.push({ href: String(brand.links.wayback), label: "Archived homepage (Wayback)", external: true });

  // Quality media links (optional)
  if (brand?.links?.verge)
    mediaLinks.push({ href: String(brand.links.verge), label: "The Verge retrospective", external: true });

  if (brand?.links?.cnet)
    mediaLinks.push({ href: String(brand.links.cnet), label: "CNET photo gallery", external: true });
}
---

<Base
  title={pageTitle}
  description={pageDesc}
  canonical={canonical}
  jsonLd={jsonLdBlocks}
>
  <Fragment slot="head">
    <meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
    {notFound && <meta name="robots" content="noindex,follow" />}
    {!notFound && (
      <>
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="Vanished Brands" />
        <meta property="og:image" content={ogImage} />
        <meta property="og:image:alt" content={ogImageAlt} />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="630" />
        <meta name="twitter:card" content={twitterCard} />
        <meta name="twitter:image" content={ogImage} />
        <meta name="twitter:image:alt" content={ogImageAlt} />
      </>
    )}
  </Fragment>

  {notFound ? (
    <>
      <nav class="flex flex-wrap items-center gap-2 my-3">
        <a href="/" class="chip focus-ring">← Home</a>
        <a href="/az/" class="chip focus-ring">Browse A–Z</a>
      </nav>
      <h1 class="text-2xl md:text-3xl font-bold mb-2">Page not found</h1>
      <p class="text-slate-600 dark:text-slate-300">Try another page or browse the full list.</p>
    </>
  ) : (
    <>
      <nav class="flex flex-wrap items-center gap-2 my-3">
        <a href="/" class="chip focus-ring">← Home</a>
        <a href="/az/" class="chip focus-ring">Browse A–Z</a>
      </nav>

      <h1 id="brand-title" class="text-2xl md:text-3xl font-bold mb-2">
        What Happened to {brand.brand}?
      </h1>

      <p class="text-gray-800 dark:text-slate-200">
        <strong>At a glance:</strong>
        {brand.active?.start ? ` Founded: ${brand.active.start}.` : "" }
        {brand.active?.end ? ` Defunct: ${brand.active.end}.` : "" }
        {brand.fate ? ` Fate: ${brand.fate}.` : "" }
        {brand.category ? ` Category: ${brand.category}.` : "" }
        {brand.country ? ` Country: ${brand.country}.` : "" }
      </p>

      {brand.summary && (
        <p class="mt-3 text-gray-700 dark:text-slate-300">{brand.summary}</p>
      )}

      {/* Keep existing UI/behavior */}
      <ExploreMore brand={brand} />

      {/* LearnMore: render when any link bucket has items */}
      {(internalLinks.length || authorityLinks.length || mediaLinks.length) && (
        <LearnMore internal={internalLinks} authority={authorityLinks} media={mediaLinks} />
      )}

      <AffiliateDisclosure />
    </>
  )}
</Base>
