---
// src/pages/topics/[topic].astro
import Base from "../../layouts/Base.astro";
import { getEntry } from "astro:content";

/** ---------- Type for topic metadata (optional but helpful) ---------- */
type TopicMeta = {
  label: string;
  desc: string;
  descLong?: string;
  heroImage?: string;
  faq?: Array<{ q: string; a: string }>;
};

/** ---------- Build static paths from topics found in brand JSON ---------- */
export function getStaticPaths() {
  // Do the glob *inside* this function to avoid hoisting/minifier issues
  const brandModules = import.meta.glob("/src/content/brands/*.json", {
    eager: true,
    import: "default",
  }) as Record<string, any>;

  const topics = new Set<string>();
  for (const mod of Object.values(brandModules)) {
    const list = Array.isArray((mod as any)?.topics) ? (mod as any).topics : [];
    for (const t of list) topics.add(String(t).toLowerCase());
  }
  return [...topics].map((topic) => ({ params: { topic } }));
}

/** ---------- Runtime: separate glob for render time ---------- */
const brandModulesRuntime = import.meta.glob("/src/content/brands/*.json", {
  eager: true,
  import: "default",
}) as Record<string, any>;

/** ---------- Helpers ---------- */
function prettyLabel(slug: string) {
  return slug
    .split("-")
    .map((s) => (s ? s[0].toUpperCase() + s.slice(1) : s))
    .join(" ");
}

/** ---------- Params & topic meta ---------- */
const { topic } = Astro.params;
const slug = String(topic).toLowerCase();

// Pull centralized meta from content/topics/topics.json (if present)
const topicsEntry = await getEntry("topics", "topics").catch(() => null);
const TOPIC_META = (topicsEntry?.data ?? {}) as Record<string, TopicMeta>;

const meta: TopicMeta =
  TOPIC_META[slug] ?? {
    label: prettyLabel(slug),
    desc: "Browse related discontinued brands collected under this topic.",
  };

/** ---------- Collect brands tagged with this topic ---------- */
const items = Object.values(brandModulesRuntime)
  .filter(
    (b: any) =>
      Array.isArray(b?.topics) &&
      b.topics.map((x: any) => String(x).toLowerCase()).includes(slug)
  )
  .map((b: any) => ({
    name: b.brand,
    slug: b.slug,
    category: b.category ?? null,
  }))
  .sort((a, b) => a.name.localeCompare(b.name));

/** ---------- SEO / Canonical & JSON-LD ---------- */
const hubPath = `/topics/${encodeURIComponent(slug)}/`;
const title = `${meta.label} • Topic Hub`;
const desc = meta.desc;
const canonical = Astro.site ? new URL(hubPath, Astro.site).href : hubPath;

const ldItems = items.map((b, i) => ({
  "@type": "ListItem",
  position: i + 1,
  name: b.name,
  url: Astro.site
    ? new URL(`/brand/${encodeURIComponent(b.slug)}/`, Astro.site).href
    : `/brand/${encodeURIComponent(b.slug)}/`,
}));

const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: title,
  numberOfItems: items.length,
  itemListElement: ldItems,
};

const collectionPageLd = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  url: canonical,
  name: title,
  description: desc,
  mainEntity: itemListLd,
};

const breadcrumbsLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    { "@type": "ListItem", position: 1, name: "Home", item: Astro.site ? new URL("/", Astro.site).href : "/" },
    { "@type": "ListItem", position: 2, name: "Topics", item: Astro.site ? new URL("/topics/", Astro.site).href : "/topics/" },
    { "@type": "ListItem", position: 3, name: meta.label, item: canonical },
  ],
};
---

<Base title={title} description={desc} canonical={canonical} jsonLd={[collectionPageLd, breadcrumbsLd, itemListLd]}>
  <Fragment slot="head">
    <meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
    <link rel="canonical" href={canonical} />
  </Fragment>

  {/* Breadcrumbs */}
  <nav class="flex flex-wrap items-center gap-2 my-3">
    <a href="/" class="chip focus-ring">← Home</a>
    <a href="/topics/" class="chip focus-ring">All Topics</a>
    <a href="/az/" class="chip focus-ring">Browse A–Z</a>
  </nav>

  {/* Header */}
  <h1 class="text-2xl md:text-3xl font-bold mb-1">{meta.label} • Topic Hub</h1>
  <p class="text-slate-600 dark:text-slate-300 mb-4">{desc}</p>

  {/* Optional hero */}
  {meta.heroImage && (
    <div class="mb-5 overflow-hidden rounded-2xl border border-slate-200 dark:border-slate-800">
      <img src={meta.heroImage} alt={`${meta.label} hero`} class="w-full h-auto block" loading="lazy" />
    </div>
  )}

  {/* Optional richer intro */}
  {meta.descLong && (
    <div class="prose dark:prose-invert max-w-none mb-6">
      <p>{meta.descLong}</p>
    </div>
  )}

  {/* Results summary */}
  <p class="text-sm text-slate-500 dark:text-slate-400 mb-3">
    {items.length} brand{items.length === 1 ? "" : "s"} in this topic
  </p>

  {/* Brand list */}
  {items.length ? (
    <ul class="grid gap-2 sm:grid-cols-2 md:grid-cols-3">
      {items.map((i) => (
        <li class="rounded-xl border border-slate-200 dark:border-slate-800 p-3">
          <a class="focus-ring hover:underline font-medium" href={`/brand/${encodeURIComponent(i.slug)}/`}>
            {i.name}
          </a>
          {i.category && (
            <span
              class="ml-2 text-xs px-2 py-0.5 rounded-full bg-slate-100 dark:bg-slate-800 text-slate-600 dark:text-slate-300 align-middle"
              aria-label={`Category: ${i.category}`}
              title={`Category: ${i.category}`}
            >
              {i.category}
            </span>
          )}
        </li>
      ))}
    </ul>
  ) : (
    <p class="text-slate-600 dark:text-slate-300">No brands are tagged with this topic yet.</p>
  )}

  {/* Gentle internal links */}
  <div class="mt-6 flex flex-wrap gap-2">
    <a href="/az/" class="chip focus-ring">Browse A–Z</a>
    <a href="/category/" class="chip focus-ring">Categories</a>
    <a href="/decade/" class="chip focus-ring">Decades</a>
  </div>
</Base>
