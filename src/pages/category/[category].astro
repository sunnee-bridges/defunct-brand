---
// src/pages/category/[category].astro
import Base from "../../layouts/Base.astro";
import { slugify } from "../../lib/slug.js";

export async function getStaticPaths() {
  // Only curated public files
  const modules = import.meta.glob("/content/brands/*.public.json", {
    eager: true,
    import: "default",
  }) as Record<string, any>;

  // Normalize + de-dupe by canonical key
  const bySlug = new Map<string, any>();
  for (const raw of Object.values(modules)) {
    const b = raw as any;
    if (!b) continue;
    const canonicalSlug = String(b.slug || "").trim().toLowerCase() || slugify(String(b.brand || ""));
    if (!canonicalSlug) continue;
    // Normalize category label too (trim)
    if (typeof b.category === "string") b.category = b.category.trim();
    // prefer first seen; change to overwrite if you want "last wins"
    if (!bySlug.has(canonicalSlug)) bySlug.set(canonicalSlug, b);
  }
  const brands = Array.from(bySlug.values()).filter((b) => b.category);

  // Unique, normalized categories
  const cats = Array.from(new Set(brands.map((b) => b.category))).sort();

  return cats.map((label) => {
    const catSlug = slugify(label);
    // Build item list for this category (de-dupe again defensively)
    const seen = new Set<string>();
    const items = brands
      .filter((b) => slugify(b.category) === catSlug)
      .filter((b) => {
        const k = (String(b.slug || "").trim().toLowerCase()) || slugify(String(b.brand || ""));
        if (seen.has(k)) return false;
        seen.add(k);
        return true;
      })
      .sort((a, b) => a.brand.localeCompare(b.brand));

    return { params: { category: catSlug }, props: { label, items, allCats: cats } };
  });
}


const { label, items, allCats } = Astro.props;

// Final guard: ensure unique by slug at render time too
const _seen = new Set<string>();
const uniqueItems = items.filter((b: any) => {
  const k = (String(b.slug || "").trim().toLowerCase()) || slugify(String(b.brand || ""));
  if (!k || _seen.has(k)) return false;
  _seen.add(k);
  return true;
});


/* ---------------- SEO / Canonical / JSON-LD ---------------- */
const pageTitle = `Defunct Brands in ${label}`;
const pageDesc  = `Explore ${items.length} defunct or discontinued brands in ${label}.`;

const categoryPath = `/category/${slugify(label)}/`;
const canonical = Astro.site ? new URL(categoryPath, Astro.site).href : categoryPath;

const breadcrumbLd = {
  ["@context"]: "https://schema.org",
  ["@type"]: "BreadcrumbList",
  itemListElement: [
    { ["@type"]: "ListItem", position: 1, name: "Home", item: Astro.site ? new URL("/", Astro.site).href : "/" },
    { ["@type"]: "ListItem", position: 2, name: "Categories", item: Astro.site ? new URL("/#categories", Astro.site).href : "/#categories" },
    { ["@type"]: "ListItem", position: 3, name: label, item: canonical },
  ],
};

const itemListLd = {
  ["@context"]: "https://schema.org",
  ["@type"]: "ItemList",
  name: pageTitle,
  itemListOrder: "http://schema.org/ItemListOrderAscending",
  numberOfItems: items.length,
  itemListElement: items.map((b: any, i: number) => ({
    ["@type"]: "ListItem",
    position: i + 1,
    url: Astro.site
      ? new URL(`/brand/${encodeURIComponent(b.slug)}/`, Astro.site).href
      : `/brand/${encodeURIComponent(b.slug)}/`,
    name: b.brand,
  })),
};
---

<Base title={pageTitle} description={pageDesc}>
  <Fragment slot="head">
    <link rel="canonical" href={canonical} />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDesc} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDesc} />
    <script type="application/ld+json">{JSON.stringify(breadcrumbLd)}</script>
    <script type="application/ld+json">{JSON.stringify(itemListLd)}</script>
  </Fragment>

  <div class="max-w-[1040px] mx-auto px-4 py-6">
    <!-- Top section nav to match other pages -->
    <nav class="mb-3 flex flex-wrap gap-2">
      <a href="/" class="chip focus-ring"><span aria-hidden="true">←</span> Home</a>
      <a href="/az/" class="chip focus-ring">A–Z</a>
      <a href="/decade/" class="chip focus-ring">Decades</a>
    </nav>

    <!-- Compact header -->
    <header class="mb-2">
      <nav class="text-sm text-slate-600 dark:text-slate-300" aria-label="Breadcrumb">
        <a href="/" class="underline-offset-2 hover:underline">Home</a>
        <span class="mx-1 text-slate-400">/</span>
        <a href="/#categories" class="underline-offset-2 hover:underline">Categories</a>
        <span class="mx-1 text-slate-400">/</span>
        <span aria-current="page" class="text-slate-900 dark:text-slate-100">{label}</span>
      </nav>

      <div class="mt-1 flex items-baseline gap-2 flex-wrap">
        <h1 class="text-xl sm:text-2xl md:text-3xl font-bold">{label} — defunct brands</h1>
        <span class="inline-flex items-center rounded-full border border-slate-200 bg-white px-2 py-0.5 text-xs font-semibold text-slate-900 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100">
          {items.length}
        </span>
      </div>

      <!-- Optional microcopy (hidden on small screens) -->
      <p class="mt-1 text-sm text-slate-600 dark:text-slate-300 hidden sm:block">
        Browse brands, filter, and sort. A–Z by default.
      </p>
    </header>

    <div class="grid gap-6 md:grid-cols-[1fr_300px] items-start">
      <!-- Main column -->
      <main id="content">
        <!-- Controls with mobile toggle -->
        <div class="mb-2">
          <button id="filtersToggle"
                  class="inline-flex items-center gap-2 border border-slate-200 bg-white text-slate-900 px-3 py-1.5 rounded-md focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100 md:hidden"
                  aria-expanded="false" aria-controls="controls">
            Filters
          </button>
        </div>

        <div id="controls"
             class="mb-2 flex flex-wrap items-center gap-3 md:gap-4 md:flex-row"
             hidden>
          <label for="q" class="text-sm text-slate-600 dark:text-slate-300">Search</label>
          <input id="q" type="search"
                 class="w-full md:w-auto flex-1 rounded-md border border-slate-300 bg-white text-slate-900 placeholder-slate-400 px-3 py-2 focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100"
                 placeholder={`Search brands in ${label}…`} inputmode="search" />

          <label for="fate" class="text-sm text-slate-600 dark:text-slate-300">Status</label>
          <select id="fate"
                  class="rounded-md border border-slate-300 bg-white text-slate-900 px-3 py-2 focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100">
            <option value="">All statuses</option>
            <option value="Acquired">Acquired</option>
            <option value="Bankruptcy">Bankrupt</option>
            <option value="Merged">Merged</option>
            <option value="Discontinued">Discontinued</option>
          </select>

          <label for="sort" class="text-sm text-slate-600 dark:text-slate-300">Sort</label>
          <select id="sort"
                  class="rounded-md border border-slate-300 bg-white text-slate-900 px-3 py-2 focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100">
            <option value="alpha">A → Z</option>
            <option value="start-asc">Oldest founded</option>
            <option value="end-desc">Most recent closure</option>
          </select>
        </div>

        <!-- Active filter chips -->
        <div id="activeChips" class="mb-4 flex flex-wrap gap-2" aria-live="polite"></div>

        <!-- Brand list -->
        <ul id="brandList" class="list-none m-0 p-0 border-t border-slate-200 dark:border-slate-800">
          {uniqueItems.map((b: any) => {
            const start = b?.active?.start ?? "";
            const end = b?.active?.end ?? "";
            const fate = b?.fate ?? "";
            return (
              <li class="flex justify-between items-baseline gap-3 py-3 border-b border-slate-200 dark:border-slate-800">
                <div class="min-w-0">
                  <a class="font-semibold text-slate-900 dark:text-slate-100 underline-offset-2 hover:underline"
                     href={`/brand/${encodeURIComponent(b.slug)}/`}>{b.brand}</a>
                  <span class="ml-1 text-sm text-slate-600 dark:text-slate-400">
                    {start ? ` (${start}\u2013${end || "?"})` : ""}{fate ? ` • ${fate}` : ""}
                  </span>
                </div>
              </li>
            );
          })}
        </ul>

        <div id="emptyBlock" class="hidden mt-2 text-slate-600 dark:text-slate-300">
          No matches. Try clearing filters or searching fewer terms.
          <button id="clearAll"
                  class="ml-2 inline-flex items-center rounded-md border border-slate-200 bg-white px-2.5 py-1 text-sm text-slate-900 focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100">
            Clear all
          </button>
        </div>
      </main>

      <!-- Sidebar -->
      <aside aria-labelledby="catHeading" class="md:sticky md:top-4">
        <h2 id="catHeading" class="text-base font-semibold mb-2 text-slate-900 dark:text-slate-100">Browse categories</h2>
        <div class="flex flex-wrap gap-2">
          {allCats.map((c: string) => {
            const href = `/category/${slugify(c)}/`;
            const isCurrent = slugify(c) === slugify(label);
            return isCurrent ? (
              <span class="chip ring-2 ring-indigo-500 ring-offset-2 ring-offset-white dark:ring-indigo-400 dark:ring-offset-slate-900 pointer-events-none" aria-current="page">{c}</span>
            ) : (
              <a href={href} class="chip focus-ring">{c}</a>
            );
          })}
        </div>
      </aside>
    </div>
  </div>

  <!-- Client: filters, chips, URL state -->
  <script>
    const $ = (s)=>document.querySelector(s);
    const $$ = (s)=>Array.from(document.querySelectorAll(s));
    const list = $("#brandList");
    const empty = $("#emptyBlock");
    const chips = $("#activeChips");
    const q = $("#q");
    const fateSel = $("#fate");
    const sortSel = $("#sort");
    const filtersToggle = $("#filtersToggle");
    const controls = $("#controls");
    const clearAllBtn = $("#clearAll");

    // URL state -> controls
    const params = new URLSearchParams(location.search);
    if (params.has("q")) q.value = params.get("q") || "";
    if (params.has("status")) fateSel.value = params.get("status") || "";
    if (params.has("sort")) sortSel.value = params.get("sort") || "alpha";

    function pushURL(){
      const p = new URLSearchParams();
      if (q.value.trim()) p.set("q", q.value.trim());
      if (fateSel.value) p.set("status", fateSel.value);
      if (sortSel.value && sortSel.value !== "alpha") p.set("sort", sortSel.value);
      const qs = p.toString();
      history.replaceState(null, "", qs ? \`?\${qs}\` : location.pathname);
    }

    function renderChips(){
      chips.innerHTML = "";
      const fr = document.createDocumentFragment();

      if (q.value.trim()){
        const el = document.createElement("span");
        el.className = "chip inline-flex items-center gap-1";
        el.innerHTML = \`<strong>Search:</strong> \${escapeHtml(q.value.trim())} <button class="ml-1 text-slate-700 dark:text-slate-300" aria-label="Clear search">✕</button>\`;
        el.querySelector("button").onclick = () => { q.value = ""; onChange(); q.focus(); };
        fr.appendChild(el);
      }
      if (fateSel.value){
        const el = document.createElement("span");
        el.className = "chip inline-flex items-center gap-1";
        el.innerHTML = \`<strong>Status:</strong> \${escapeHtml(fateSel.value)} <button class="ml-1 text-slate-700 dark:text-slate-300" aria-label="Clear status filter">✕</button>\`;
        el.querySelector("button").onclick = () => { fateSel.value = ""; onChange(); fateSel.focus(); };
        fr.appendChild(el);
      }
      if (fr.childNodes.length){
        const clear = document.createElement("button");
        clear.textContent = "Clear all";
        clear.className = "chip focus-ring cursor-pointer";
        clear.onclick = () => { q.value = ""; fateSel.value=""; sortSel.value="alpha"; onChange(); };
        fr.appendChild(clear);
      }
      chips.appendChild(fr);
    }

    function applyFilters(){
      const term = (q.value || "").trim().toLowerCase();
      const fate = (fateSel.value || "").toLowerCase();

      let visible = 0;
      $$("#brandList > li").forEach(li => {
        const text = (li.textContent || "").toLowerCase();
        const showText = !term || text.includes(term);
        const showFate = !fate || text.includes(fate);
        const show = showText && showFate;
        li.style.display = show ? "" : "none";
        if (show) visible++;
      });
      empty.classList.toggle("hidden", !!visible);
    }

    function applySort(){
      const mode = sortSel.value;
      const rows = $$("#brandList > li").filter(li => li.style.display !== "none");
      const getName = (li)=> (li.querySelector("a")?.textContent || "").toLowerCase();
      const getYear = (li, which)=> {
        const t = li.textContent || "";
        const m = t.match(/\((\d{3,4})\u2013(\?|\d{3,4})\)/);
        if (!m) return 0;
        return which === "start" ? parseInt(m[1],10) : (m[2] === "?" ? 0 : parseInt(m[2],10));
      };

      rows.sort((a,b)=>{
        if (mode === "alpha") return getName(a).localeCompare(getName(b));
        if (mode === "start-asc") return getYear(a,"start") - getYear(b,"start") || getName(a).localeCompare(getName(b));
        if (mode === "end-desc") return getYear(b,"end") - getYear(a,"end") || getName(a).localeCompare(getName(b));
        return 0;
      });
      rows.forEach(r => list.appendChild(r));
    }

    function onChange(){ applyFilters(); applySort(); renderChips(); pushURL(); }

    // Mobile filters toggle
    function setFiltersVisible(v){
      if (v){ controls.removeAttribute("hidden"); filtersToggle.setAttribute("aria-expanded","true"); }
      else  { controls.setAttribute("hidden","");     filtersToggle.setAttribute("aria-expanded","false"); }
    }
    filtersToggle.addEventListener("click", ()=>{
      const open = filtersToggle.getAttribute("aria-expanded") === "true";
      setFiltersVisible(!open);
    });
    if (window.matchMedia("(min-width: 768px)").matches) setFiltersVisible(true);

    // Keyboard niceties
    window.addEventListener("keydown", (e) => {
      if (e.key === "/" && document.activeElement?.tagName !== "INPUT"){
        e.preventDefault(); q.focus();
      } else if (e.key === "Escape"){
        if (q.value){ q.value=""; onChange(); }
      }
    });

    clearAllBtn?.addEventListener("click", ()=>{ q.value=""; fateSel.value=""; sortSel.value="alpha"; onChange(); });
    q.addEventListener("input", onChange);
    fateSel.addEventListener("change", onChange);
    sortSel.addEventListener("change", onChange);

    // Initial
    onChange();

    // Helpers
    function escapeHtml(s){
      return s.replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
    }
  </script>
</Base>
