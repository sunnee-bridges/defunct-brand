---
// src/pages/category/[category].astro
import Base from "../../layouts/Base.astro";
import { slugify } from "../../lib/slug.js";

/** Build-time: enumerate all categories and precompute the items for each */
export async function getStaticPaths() {
  // ✅ Only curated public files
  const modules = import.meta.glob("/content/brands/*.public.json", {
    eager: true,
    import: "default",
  }) as Record<string, any>;

  // Normalize & de-dupe by canonical slug
  const bySlug = new Map<string, any>();
  for (const raw of Object.values(modules)) {
    const b = raw as any;
    if (!b) continue;
    const key =
      String(b.slug || "").trim().toLowerCase() ||
      slugify(String(b.brand || ""));
    if (!key) continue;
    if (typeof b.category === "string") b.category = b.category.trim();
    if (!b.category) continue;
    if (!bySlug.has(key)) bySlug.set(key, b); // first-wins
  }
  const brands = Array.from(bySlug.values());

  // Unique category labels (sorted)
  const cats = Array.from(new Set(brands.map((b) => b.category))).sort();

  // Page props per category
  return cats.map((label) => {
    const catSlug = slugify(label);

    // Items for this category (defensive de-dupe again)
    const seen = new Set<string>();
    const items = brands
      .filter((b) => slugify(b.category) === catSlug)
      .filter((b) => {
        const k =
          String(b.slug || "").trim().toLowerCase() ||
          slugify(String(b.brand || ""));
        if (seen.has(k)) return false;
        seen.add(k);
        return true;
      })
      .sort((a, b) => a.brand.localeCompare(b.brand));

    return { params: { category: catSlug }, props: { label, items, allCats: cats } };
  });
}

/** Props from getStaticPaths */
const { label, items, allCats } = Astro.props;

/** Final render-time guard (belt & suspenders) */
const _seen = new Set<string>();
const uniqueItems = items.filter((b: any) => {
  const k =
    String(b.slug || "").trim().toLowerCase() ||
    slugify(String(b.brand || ""));
  if (!k || _seen.has(k)) return false;
  _seen.add(k);
  return true;
});

/* ---------------- SEO / Canonical / JSON-LD ---------------- */
const title = `Defunct Brands in ${label}`;
const description = `Explore ${uniqueItems.length} defunct or discontinued brands in ${label}.`;

const categoryPath = `/category/${slugify(label)}/`;
const canonical = Astro.site ? new URL(categoryPath, Astro.site).href : categoryPath;

const breadcrumbLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    { "@type": "ListItem", position: 1, name: "Home", item: Astro.site ? new URL("/", Astro.site).href : "/" },
    { "@type": "ListItem", position: 2, name: "Categories", item: Astro.site ? new URL("/#categories", Astro.site).href : "/#categories" },
    { "@type": "ListItem", position: 3, name: label, item: canonical },
  ],
};

const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: title,
  itemListOrder: "http://schema.org/ItemListOrderAscending",
  numberOfItems: uniqueItems.length,
  itemListElement: uniqueItems.map((b: any, i: number) => ({
    "@type": "ListItem",
    position: i + 1,
    url: Astro.site
      ? new URL(`/brand/${encodeURIComponent(b.slug)}/`, Astro.site).href
      : `/brand/${encodeURIComponent(b.slug)}/`,
    name: b.brand,
  })),
};
---

<Base title={title} description={description}>
  <!-- Match index.astro: simple nav block -->
  <nav class="mb-4">
    <a href="/" class="chip focus-ring">← Home</a>
  </nav>

  <!-- Compact header to avoid repetition -->
  <h1 class="text-2xl md:text-3xl font-bold mb-2">
    {label} — defunct brands
    <span class="ml-2 align-middle inline-flex items-center rounded-full border border-slate-200 bg-white px-2 py-0.5 text-xs font-semibold text-slate-900 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100">
      {uniqueItems.length}
    </span>
  </h1>
  <p class="text-slate-700 dark:text-slate-300 mb-3">
    Browse brands, filter, and sort. A–Z by default.
  </p>

  <!-- Optional: quick controls (kept minimal to match index.astro’s simplicity) -->
  <div class="mb-3 flex flex-wrap items-center gap-3">
    <label for="q" class="text-sm text-slate-600 dark:text-slate-300">Search</label>
    <input id="q" type="search"
           class="w-full md:w-auto flex-1 rounded-md border border-slate-300 bg-white text-slate-900 placeholder-slate-400 px-3 py-2 focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100"
           placeholder={`Search brands in ${label}…`} inputmode="search" />
    <label for="sort" class="text-sm text-slate-600 dark:text-slate-300">Sort</label>
    <select id="sort"
            class="rounded-md border border-slate-300 bg-white text-slate-900 px-3 py-2 focus-ring dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100">
      <option value="alpha">A → Z</option>
      <option value="start-asc">Oldest founded</option>
      <option value="end-desc">Most recent closure</option>
    </select>
  </div>

  <!-- List -->
  <ul id="brandList" class="m-0 p-0 list-none border-t border-slate-200 dark:border-slate-800">
    {uniqueItems.map((b: any) => {
      const start = b?.active?.start ?? "";
      const end = b?.active?.end ?? "";
      const fate = b?.fate ?? "";
      return (
        <li class="flex justify-between items-baseline gap-3 py-3 border-b border-slate-200 dark:border-slate-800">
          <div class="min-w-0">
            <a class="font-semibold text-slate-900 dark:text-slate-100 underline-offset-2 hover:underline focus-ring rounded"
               href={`/brand/${encodeURIComponent(b.slug)}/`}>{b.brand}</a>
            <span class="ml-1 text-sm text-slate-600 dark:text-slate-400">
              {start ? ` (${start}\u2013${end || "?"})` : ""}{fate ? ` • ${fate}` : ""}
            </span>
          </div>
        </li>
      );
    })}
  </ul>

  <!-- SEO tags into <head> via Base’s slot -->
  <Fragment slot="head">
    <link rel="canonical" href={canonical} />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <script type="application/ld+json">{JSON.stringify(breadcrumbLd)}</script>
    <script type="application/ld+json">{JSON.stringify(itemListLd)}</script>
  </Fragment>

  <!-- Tiny client helpers (optional) -->
  <script>
    const $ = (s)=>document.querySelector(s);
    const $$ = (s)=>Array.from(document.querySelectorAll(s));
    const list = $("#brandList");
    const q = $("#q");
    const sortSel = $("#sort");

    function applyFilters() {
      const term = (q.value || "").trim().toLowerCase();
      $$("#brandList > li").forEach(li => {
        const txt = (li.textContent || "").toLowerCase();
        li.style.display = !term || txt.includes(term) ? "" : "none";
      });
    }

    function applySort() {
      const mode = sortSel.value;
      const rows = $$("#brandList > li").filter(li => li.style.display !== "none");
      const getName = (li)=> (li.querySelector("a")?.textContent || "").toLowerCase();
      const getYear = (li, which)=> {
        const t = li.textContent || "";
        const m = t.match(/\((\d{3,4})\u2013(\?|\d{3,4})\)/);
        if (!m) return 0;
        return which === "start" ? parseInt(m[1],10) : (m[2] === "?" ? 0 : parseInt(m[2],10));
      };

      rows.sort((a,b)=>{
        if (mode === "alpha") return getName(a).localeCompare(getName(b));
        if (mode === "start-asc") return getYear(a,"start") - getYear(b,"start") || getName(a).localeCompare(getName(b));
        if (mode === "end-desc") return getYear(b,"end") - getYear(a,"end") || getName(a).localeCompare(getName(b));
        return 0;
      });
      rows.forEach(r => list.appendChild(r));
    }

    function onChange(){ applyFilters(); applySort(); }
    q.addEventListener("input", onChange);
    sortSel.addEventListener("change", onChange);
    onChange();
  </script>
</Base>
