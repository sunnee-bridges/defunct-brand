---
import { slugify } from "../../lib/slug.js";

/** Build-time: enumerate all categories and precompute the items for each */
export async function getStaticPaths() {
  const modules = import.meta.glob("/content/brands/*.json", { eager: true });
  const brands = Object.values(modules).map((mod: any) => mod.default ?? mod);
  const cats = Array.from(new Set(brands.map((b: any) => b.category))).sort();

  return cats.map((label) => {
    const catSlug = slugify(label);
    const items = brands
      .filter((b: any) => slugify(b.category) === catSlug)
      .sort((a: any, b: any) => a.brand.localeCompare(b.brand));
    return { params: { category: catSlug }, props: { label, items, allCats: cats } };
  });
}

const { label, items, allCats } = Astro.props;

const title = `Defunct Brands in ${label}`;
const desc = `Explore ${items.length} defunct or discontinued brands in ${label}.`;
const canonical = Astro.url.toString();

/** SEO JSON-LD: Breadcrumbs and ItemList */
const breadcrumbLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    { "@type": "ListItem", "position": 1, "name": "Home", "item": new URL("/", Astro.url).toString() },
    { "@type": "ListItem", "position": 2, "name": "Categories", "item": new URL("/#categories", Astro.url).toString() },
    { "@type": "ListItem", "position": 3, "name": label, "item": canonical }
  ]
};

const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "name": title,
  "itemListOrder": "http://schema.org/ItemListOrderAscending",
  "numberOfItems": items.length,
  "itemListElement": items.map((b: any, i: number) => ({
    "@type": "ListItem",
    "position": i + 1,
    "url": new URL(`/brand/${b.slug}/`, Astro.url).toString(),
    "name": b.brand
  }))
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="description" content={desc} />
    <link rel="canonical" href={canonical} />

    <!-- Open Graph / Twitter -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={desc} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={desc} />

    <!-- JSON-LD -->
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbLd)}></script>
    <script type="application/ld+json" set:html={JSON.stringify(itemListLd)}></script>

    <!-- Minimal CSS (no framework) -->
    <style>
      :root{
        /* Light theme */
        --fg:#111827;            /* gray-900 */
        --muted:#4b5563;         /* gray-600 */
        --bg:#ffffff;
        --line:#e5e7eb;          /* gray-200 */
        --pill:#ffffff;          /* chip bg */
        --pillHover:#f8fafc;     /* slate-50 */
        --ring:#2563eb;          /* blue-600 */
        --ringOffset:#ffffff;

        --field-bg:#ffffff;
        --field-fg:#111827;
        --field-ph:#6b7280;
        --field-border:#cbd5e1;  /* slate-300 */

        --badge-ok-bg:#f0fdf4;   /* emerald-50 */
        --badge-ok-fg:#065f46;   /* emerald-700 */
        --badge-ok-br:#bbf7d0;

        --badge-bad-bg:#fef2f2;  /* red-50 */
        --badge-bad-fg:#991b1b;  /* red-800 */
        --badge-bad-br:#fecaca;

        --badge-warn-bg:#fffbeb; /* amber-50 */
        --badge-warn-fg:#92400e; /* amber-800 */
        --badge-warn-br:#fde68a;
      }

      @media (prefers-color-scheme: dark){
        :root{
          /* Dark theme */
          --fg:#e5e7eb;            /* slate-200 */
          --muted:#cbd5e1;         /* slate-300 */
          --bg:#0b0b0f;
          --line:#1f2937;          /* gray-800 */
          --pill:#121418;          /* chip bg */
          --pillHover:#15181e;
          --ring:#60a5fa;          /* blue-400 */
          --ringOffset:#0b0b0f;

          --field-bg:#1a1f24;
          --field-fg:#f1f5f9;
          --field-ph:#94a3b8;
          --field-border:#334155;

          --badge-ok-bg:rgba(16,185,129,.15);
          --badge-ok-fg:#a7f3d0;
          --badge-ok-br:#065f46;

          --badge-bad-bg:rgba(239,68,68,.12);
          --badge-bad-fg:#fecaca;
          --badge-bad-br:#7f1d1d;

          --badge-warn-bg:rgba(245,158,11,.14);
          --badge-warn-fg:#fde68a;
          --badge-warn-br:#78350f;
        }
      }

      html { color-scheme: light dark; background: var(--bg); }
      body {
        font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji","Segoe UI Emoji";
        margin: 0; color: var(--fg); background: var(--bg);
      }
      .wrap { max-width: 1040px; margin: 2rem auto; padding: 0 1rem; }
      header a { text-decoration: none; }
      h1 { line-height: 1.2; margin: .5rem 0 1rem; }
      .subtle { color: var(--muted); }

      /* Top chip nav (matches /data) */
      .chipbar { display:flex; flex-wrap:wrap; gap:.5rem; margin-bottom:.5rem; }
      .chip {
        display:inline-flex; align-items:center; gap:.4rem;
        padding:.4rem .75rem; border-radius:999px;
        border:1px solid var(--line);
        background: var(--pill);
        color: var(--fg);
        font-size:.9rem; font-weight:500;
        text-decoration:none;
        box-shadow: 0 1px 0 rgba(0,0,0,.04);
        transition: background-color .15s ease;
      }
      .chip:hover { background: var(--pillHover); }
      .chip:focus-visible {
        outline: none;
        box-shadow: 0 0 0 2px var(--ring), 0 0 0 4px var(--ringOffset);
      }

      /* Category pills (right sidebar) */
      .pillbar { display:flex; flex-wrap:wrap; gap:.5rem; margin:.5rem 0 1.25rem; }
      .pill {
        display:inline-block; padding:.35rem .65rem; border-radius:999px;
        background:var(--pill); color:var(--fg); font-size:.9rem; text-decoration:none; border:1px solid var(--line);
        transition: background-color .15s ease;
      }
      .pill:hover { background:var(--pillHover); }
      .pill[aria-current="page"] { font-weight:600; outline:2px solid var(--ring); outline-offset:2px; }

      /* Controls */
      .controls { display:flex; flex-wrap:wrap; gap:.65rem 1rem; align-items:center; margin:1rem 0; }
      .controls label { font-size:.92rem; color: var(--muted); }
      .controls input[type="search"], .controls select {
        padding:.55rem .65rem; border:1px solid var(--field-border); border-radius:.6rem; font:inherit;
        background: var(--field-bg); color: var(--field-fg);
      }
      .controls input::placeholder { color: var(--field-ph); }
      .controls input:focus, .controls select:focus {
        outline:none; box-shadow: 0 0 0 2px var(--ring), 0 0 0 4px var(--ringOffset);
      }
      .srch { flex: 1 1 260px; min-width: 220px; }

      /* List */
      .list { margin: 1rem 0 2rem; padding: 0; list-style:none; border-top:1px solid var(--line); }
      .row { display:flex; gap:.75rem; justify-content:space-between; align-items:baseline;
             padding:.8rem 0; border-bottom:1px solid var(--line); }
      .row a { font-weight:600; text-decoration:none; color: var(--fg); }
      .meta { color:var(--muted); font-size:.95rem; }
      .tag { font-size:.85rem; padding:.15rem .45rem; border-radius:.45rem; border:1px solid var(--line); }
      .tag.bad { color:var(--badge-bad-fg); border-color:var(--badge-bad-br); background:var(--badge-bad-bg); }
      .tag.ok { color:var(--badge-ok-fg); border-color:var(--badge-ok-br); background:var(--badge-ok-bg); }
      .tag.warn { color:var(--badge-warn-fg); border-color:var(--badge-warn-br); background:var(--badge-warn-bg); }

      /* Breadcrumbs */
      nav.breadcrumbs { font-size:.9rem; margin-bottom:.5rem; color: var(--muted); }

      /* Grid / sticky aside */
      @media (min-width: 900px) {
        .grid { display:grid; grid-template-columns: 1fr 300px; gap: 2rem; align-items:start; }
        aside { position: sticky; top: 1.25rem; }
      }
    </style>
  </head>

  <body>
    <a href="#content" class="subtle" style="position:absolute;left:-9999px;">Skip to content</a>
    <div class="wrap">
      <!-- Chip nav to match /data -->
      <nav class="chipbar" aria-label="Section navigation">
        <a href="/" class="chip"><span aria-hidden="true">←</span> Home</a>
        <a href="/az/" class="chip">A–Z</a>
        <a href="/decade/" class="chip">Decades</a>
      </nav>

      <header>
        <nav class="breadcrumbs" aria-label="Breadcrumb">
          <a href="/">Home</a> <span class="sep">/</span>
          <a href="/#categories">Categories</a> <span class="sep">/</span>
          <span aria-current="page" style="color:var(--fg);">{label}</span>
        </nav>
        <h1>{title}</h1>
        <p class="subtle">{desc}</p>
      </header>

      <div class="grid">
        <main id="content">
          <!-- Controls -->
          <div class="controls" role="region" aria-label="List controls">
            <label for="q">Search</label>
            <input id="q" class="srch" type="search" placeholder="Search brands…" inputmode="search" />

            <label for="fate">Status</label>
            <select id="fate" aria-label="Filter by status">
              <option value="">All statuses</option>
              <option value="Bankruptcy">Bankruptcy</option>
              <option value="Acquired">Acquired</option>
              <option value="Merged">Merged</option>
              <option value="Discontinued">Discontinued</option>
            </select>

            <label for="sort">Sort</label>
            <select id="sort" aria-label="Sort list">
              <option value="alpha">A → Z</option>
              <option value="start-asc">Oldest founded</option>
              <option value="end-desc">Most recent closure</option>
            </select>
          </div>

          <!-- List -->
          <ul class="list" id="brandList">
            {items.map((b: any) => {
              const start = b?.active?.start ?? "";
              const end = b?.active?.end ?? "";
              const fate = b?.fate ?? "";
              const statusClass = fate.match(/bankrupt/i) ? "bad" : fate.match(/acquir|acquired/i) ? "ok" : fate ? "warn" : "";
              return (
                <li class="row"
                    data-brand={b.brand.toLowerCase()}
                    data-fate={fate.toLowerCase()}
                    data-start={start || "0"}
                    data-end={end || "0"}>
                  <div>
                    <a href={`/brand/${b.slug}/`}>{b.brand}</a>
                    <span class="meta">
                      {start ? ` (${start}\u2013${end || "?"})` : ""}
                    </span>
                  </div>
                  <div>
                    {fate && <span class={`tag ${statusClass}`}>{fate}</span>}
                  </div>
                </li>
              );
            })}
          </ul>
          <p class="subtle" id="emptyState" style="display:none;">No brands match your filters.</p>
        </main>

        <aside aria-labelledby="catHeading">
          <h2 id="catHeading" style="margin:.25rem 0 .5rem;">Browse categories</h2>
          <div class="pillbar" role="list" aria-label="Categories">
            {allCats.map((c: string) => {
              const href = `/category/${slugify(c)}/`;
              const current = slugify(c) === slugify(label);
              return (
                <a role="listitem" href={href} class="pill" aria-current={current ? "page" : undefined}>{c}</a>
              );
            })}
          </div>
        </aside>
      </div>
    </div>

    <!-- Lightweight client-side UX (no framework) -->
    <script>
      const $ = (s)=>document.querySelector(s);
      const $$ = (s)=>Array.from(document.querySelectorAll(s));
      const list = $("#brandList");
      const empty = $("#emptyState");
      const q = $("#q");
      const fateSel = $("#fate");
      const sortSel = $("#sort");

      function applyFilters() {
        const term = (q.value || "").trim().toLowerCase();
        const fate = (fateSel.value || "").toLowerCase();

        let visible = 0;
        $$("#brandList > li").forEach(li => {
          const matchesText = li.dataset.brand.includes(term);
          const matchesFate = !fate || (li.dataset.fate || "").includes(fate);
          const show = matchesText && matchesFate;
          li.style.display = show ? "" : "none";
          if (show) visible++;
        });
        empty.style.display = visible ? "none" : "";
      }

      function applySort() {
        const mode = sortSel.value;
        const rows = $$("#brandList > li").filter(li => li.style.display !== "none");
        const cmpAlpha = (a,b)=>a.dataset.brand.localeCompare(b.dataset.brand);
        const num = (v)=>parseInt(v || "0", 10);

        rows.sort((a,b)=>{
          if (mode === "alpha") return cmpAlpha(a,b);
          if (mode === "start-asc") return num(a.dataset.start) - num(b.dataset.start) || cmpAlpha(a,b);
          if (mode === "end-desc") return num(b.dataset.end) - num(a.dataset.end) || cmpAlpha(a,b);
          return 0;
        });
        rows.forEach(r => list.appendChild(r));
      }

      q.addEventListener("input", ()=>{ applyFilters(); applySort(); });
      fateSel.addEventListener("change", ()=>{ applyFilters(); applySort(); });
      sortSel.addEventListener("change", applySort);

      // Initial
      applyFilters(); applySort();
    </script>
  </body>
</html>
