---
// src/pages/decade/index.astro
import Base from "../../layouts/Base.astro";
import { slugify } from "../../lib/slug.js";

/* ---- Load curated public data & de-dupe by slug ---- */
const modules = import.meta.glob("/content/brands/*.public.json", {
  eager: true,
  import: "default",
}) as Record<string, any>;

const bySlug = new Map<string, any>();
for (const raw of Object.values(modules)) {
  const b = raw as any;
  if (!b) continue;
  const key =
    String(b.slug || "").trim().toLowerCase() ||
    slugify(String(b.brand || ""));
  if (!key) continue;
  // normalize category (optional)
  if (typeof b.category === "string") b.category = b.category.trim();
  if (!bySlug.has(key)) bySlug.set(key, b); // first-wins; flip if you prefer last-wins
}
const brands: any[] = Array.from(bySlug.values());

/* ---- Helpers ---- */
const toYear = (v: unknown): number | undefined => {
  if (v == null) return undefined;
  const m = String(v).match(/\d{3,4}/);
  if (!m) return undefined;
  const n = parseInt(m[0], 10);
  return Number.isFinite(n) ? n : undefined;
};
const decadeStart = (y: number) => Math.floor(y / 10) * 10;
const labelOf = (start: number) => `${start}s`;

/* ---- Build map: decade label -> count (prefer end year, fallback start) ---- */
const counts = new Map<string, number>();
for (const b of brands) {
  const y = toYear(b?.active?.end) ?? toYear(b?.active?.start);
  if (y == null) continue;
  const start = decadeStart(y);
  const label = labelOf(start);
  counts.set(label, (counts.get(label) ?? 0) + 1);
}

/* ---- Sorted available decades (labels like "1940s", "1950s", …) ---- */
const decades = [...counts.keys()].sort(
  (a, b) => parseInt(a) - parseInt(b)
);

/* ---- SEO ---- */
const PAGE_TITLE = "Browse by Decade • Defunct Brands";
const PAGE_DESC = decades.length
  ? `Browse defunct brands by decade (${decades[0]}–${decades[decades.length - 1]}).`
  : "Browse defunct brands by decade.";
const CANONICAL = Astro.site ? new URL("/decade/", Astro.site).href : "/decade/";

/* JSON-LD ItemList for the decade list */
const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: "Defunct brands by decade",
  itemListElement: decades.map((d, i) => ({
    "@type": "ListItem",
    position: i + 1,
    name: d,
    url: Astro.site ? new URL(`/decade/${d}/`, Astro.site).href : `/decade/${d}/`,
    numberOfItems: counts.get(d) ?? 0,
  })),
};
---

<Base title={PAGE_TITLE} description={PAGE_DESC}>
  <!-- SEO head -->
  <Fragment slot="head">
    <link rel="canonical" href={CANONICAL} />
    <meta name="description" content={PAGE_DESC} />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={CANONICAL} />
    <meta property="og:title" content={PAGE_TITLE} />
    <meta property="og:description" content={PAGE_DESC} />

    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={PAGE_TITLE} />
    <meta name="twitter:description" content={PAGE_DESC} />

    <script type="application/ld+json">{JSON.stringify(itemListLd)}</script>
  </Fragment>

  <!-- Breadcrumb-ish chips -->
  <nav class="mb-3 flex flex-wrap gap-2" aria-label="Breadcrumb">
    <a href="/" class="chip focus-ring">← Home</a>
    <span class="chip opacity-70 cursor-default" aria-current="page">Decades</span>
  </nav>

  <h1 class="text-2xl md:text-3xl font-bold mb-1">Browse by Decade</h1>
  <p class="text-sm text-slate-600 dark:text-slate-300 mb-2">
    Explore brands by the decade they ended (or started when unknown).
  </p>

  {decades.length === 0 ? (
    <p class="text-slate-600 dark:text-slate-400">No decades available yet.</p>
  ) : (
    /* Card grid of decades */
    <ul class="grid grid-cols-[repeat(auto-fill,minmax(200px,1fr))] sm:grid-cols-[repeat(auto-fill,minmax(220px,1fr))] lg:grid-cols-[repeat(auto-fill,minmax(240px,1fr))] gap-4 mt-4">
      {decades.map((d) => (
        <li>
          <article
            class="relative group rounded-xl p-4 border transition
                   bg-white border-gray-200 hover:bg-slate-50
                   dark:bg-slate-900 dark:border-slate-700 dark:hover:bg-slate-800
                   focus-within:ring-2 focus-within:ring-indigo-500
                   focus-within:ring-offset-2 focus-within:ring-offset-white
                   dark:focus-within:ring-offset-slate-900"
          >
            <!-- Full-card click -->
            <a
              href={`/decade/${d}/`}
              class="stretched-link focus-ring rounded"
              aria-label={`View ${d} brands`}
            ></a>

            <h2 class="text-lg font-semibold leading-snug mb-1 text-slate-900 dark:text-slate-100 group-hover:underline underline-offset-2">
              {d}
            </h2>
            <p class="text-sm text-slate-600 dark:text-slate-300">
              {counts.get(d)} {counts.get(d) === 1 ? "brand" : "brands"}
            </p>
          </article>
        </li>
      ))}
    </ul>
  )}
</Base>
