---
import Base from "../../layouts/Base.astro";
import { slugify } from "../../lib/slug.js";

/* ---------- Small helpers ---------- */
const parseYear = (v: unknown): number | undefined => {
  if (v == null) return undefined;
  const m = String(v).match(/\d{3,4}/);
  if (!m) return undefined;
  const n = parseInt(m[0], 10);
  return Number.isFinite(n) ? n : undefined;
};
const decadeLabel = (start: number) => `${start}s`;
const decadeStartFromParam = (p: string | undefined): number | null => {
  if (!p) return null;
  const m = p.match(/^(\d{3,4})s$/i);
  return m ? parseInt(m[1], 10) : null;
};
const inDecade = (year: number | undefined, start: number) =>
  typeof year === "number" && year >= start && year <= start + 9;

/* ---------- Build-time: pre-generate only decades that exist ---------- */
export async function getStaticPaths() {
  // Inline the curated loader here so nothing is “undefined”
  const mods = import.meta.glob("/content/brands/*.public.json", {
    eager: true,
    import: "default",
  }) as Record<string, any>;

  const bySlug = new Map<string, any>();
  for (const raw of Object.values(mods)) {
    const b = raw as any;
    if (!b) continue;
    const key =
      String(b.slug || "").trim().toLowerCase() ||
      slugify(String(b.brand || ""));
    if (!key) continue;
    if (!bySlug.has(key)) bySlug.set(key, b); // first wins
  }
  const brands: any[] = Array.from(bySlug.values());

  const byDecade: Record<string, any[]> = {};
  for (const b of brands) {
    const endY = parseYear(b?.active?.end);
    const startY = parseYear(b?.active?.start);
    const y = endY ?? startY;
    if (y == null) continue;
    const start = Math.floor(y / 10) * 10;
    const key = decadeLabel(start);
    (byDecade[key] ||= []).push(b);
  }

  return Object.keys(byDecade)
    .sort((a, b) => parseInt(a) - parseInt(b))
    .map((dec) => ({
      params: { decade: dec },
      props: {
        decade: dec,
        start: parseInt(dec, 10),
        items: byDecade[dec]
          .slice()
          .sort((a, b) => (a.brand || "").localeCompare(b.brand || "")),
      },
    }));
}

/* ---------- Runtime: same curated+deduped loader (separate from build fn) ---------- */
function loadDedupedPublicBrandsRuntime() {
  const mods = import.meta.glob("/content/brands/*.public.json", {
    eager: true,
    import: "default",
  }) as Record<string, any>;

  const bySlug = new Map<string, any>();
  for (const raw of Object.values(mods)) {
    const b = raw as any;
    if (!b) continue;
    const key =
      String(b.slug || "").trim().toLowerCase() ||
      slugify(String(b.brand || ""));
    if (!key) continue;
    if (!bySlug.has(key)) bySlug.set(key, b);
  }
  return Array.from(bySlug.values());
}

/* ---------- Runtime props + safe fallback ---------- */
const allBrands = loadDedupedPublicBrandsRuntime();

let { decade, start, items } = Astro.props as {
  decade?: string; start?: number; items?: any[];
};

if (!decade) {
  const s = decadeStartFromParam(Astro.params.decade) ?? NaN;
  start = s;
  decade = Number.isFinite(s) ? decadeLabel(s) : "Decade";
  items = Number.isFinite(s)
    ? allBrands
        .filter((b) =>
          inDecade(parseYear(b?.active?.end) ?? parseYear(b?.active?.start), s)
        )
        .sort((a, b) => (a.brand || "").localeCompare(b.brand || ""))
    : [];
}

/* ---------- 404 guard ---------- */
const notFound = !Number.isFinite(start!) || (items?.length ?? 0) === 0;
if (notFound) Astro.response.status = 404;

/* ---------- SEO ---------- */
const PAGE_TITLE = notFound
  ? "Page not found"
  : `Defunct Brands in the ${decade}`;
const PAGE_DESC = notFound
  ? "Try another page or jump to a random brand."
  : `Explore ${items!.length} brands from the ${decade}.`;

const CANONICAL = notFound
  ? (Astro.site ? new URL("/decade/", Astro.site).href : "/decade/")
  : (Astro.site ? new URL(`/decade/${decade}/`, Astro.site).href : `/decade/${decade}/`);

const breadcrumbsLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    { "@type": "ListItem", position: 1, name: "Home", item: Astro.site ? new URL("/", Astro.site).href : "/" },
    { "@type": "ListItem", position: 2, name: "Decades", item: Astro.site ? new URL("/decade/", Astro.site).href : "/decade/" },
    !notFound && { "@type": "ListItem", position: 3, name: decade, item: CANONICAL },
  ].filter(Boolean),
};

const LD_MAX = 100;
const itemListLd = !notFound
  ? {
      "@context": "https://schema.org",
      "@type": "ItemList",
      name: `Brands in the ${decade}`,
      itemListOrder: "http://schema.org/ItemListOrderAscending",
      numberOfItems: items!.length,
      itemListElement: items!.slice(0, LD_MAX).map((b: any, i: number) => ({
        "@type": "ListItem",
        position: i + 1,
        name: b.brand,
        url: Astro.site
          ? new URL(`/brand/${encodeURIComponent(b.slug)}/`, Astro.site).href
          : `/brand/${encodeURIComponent(b.slug)}/`,
      })),
    }
  : null;
---

<Base title={PAGE_TITLE} description={PAGE_DESC}>
  <Fragment slot="head">
    <link rel="canonical" href={CANONICAL} />
    <meta property="og:url" content={CANONICAL} />
    <meta property="og:title" content={PAGE_TITLE} />
    <meta property="og:description" content={PAGE_DESC} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={PAGE_TITLE} />
    <meta name="twitter:description" content={PAGE_DESC} />
    {notFound && <meta name="robots" content="noindex,follow" />}
    <script type="application/ld+json">{JSON.stringify(breadcrumbsLd)}</script>
    {!notFound && itemListLd && (
      <script type="application/ld+json">{JSON.stringify(itemListLd)}</script>
    )}
  </Fragment>

  <nav class="mb-4 flex flex-wrap gap-2">
    <a href="/" class="chip focus-ring">← Home</a>
    <a href="/decade/" class="chip focus-ring">All decades</a>
    <a href="#" data-random class="btn-primary focus-ring">Random</a>
  </nav>

  {notFound ? (
    <>
      <h1 class="text-2xl md:text-3xl font-bold mb-2">Page not found</h1>
      <p class="text-slate-600 dark:text-slate-300">Try another page or jump to a random brand.</p>
      <div class="mt-4 flex gap-2">
        <a href="/az/" class="chip focus-ring">Browse A–Z</a>
        <a href="/category/" class="chip focus-ring">Categories</a>
        <a href="/decade/" class="chip focus-ring">Decades</a>
        <a href="#" data-random class="btn-primary focus-ring">Random</a>
      </div>
    </>
  ) : (
    <>
      <h1 class="text-2xl md:text-3xl font-bold mb-2">Defunct Brands in the {decade}</h1>
      <p class="text-slate-600 dark:text-slate-300 mb-4">{PAGE_DESC}</p>

      <ul class="grid grid-cols-[repeat(auto-fill,minmax(240px,1fr))] gap-3">
        {items!.map((b: any) => (
          <li>
            <article
              class="relative group rounded-xl p-4 border transition
                     bg-white border-gray-200 hover:bg-slate-50
                     dark:bg-slate-900 dark:border-slate-700 dark:hover:bg-slate-800
                     focus-within:ring-2 focus-within:ring-indigo-500
                     focus-within:ring-offset-2 focus-within:ring-offset-white
                     dark:focus-within:ring-offset-slate-900"
            >
              <!-- Full-card click -->
              <a
                href={`/brand/${encodeURIComponent(b.slug)}/`}
                class="stretched-link focus-ring rounded"
                aria-label={`${b.brand}${b.active?.start ? ` (${b.active.start}–${b.active?.end ?? "?"})` : ""}${b.fate ? ` — ${b.fate}` : ""}`}
              ></a>

              <h3 class="text-base font-semibold mb-1 text-slate-900 dark:text-slate-100 group-hover:underline underline-offset-2">
                {b.brand}
              </h3>
              <div class="text-sm text-gray-600 dark:text-slate-300">
                {b.active?.start ?? ""}{b.active?.start ? '\u2013' : ''}{b.active?.start ? (b.active?.end ?? '?') : ''}{b.fate ? ` \u2014 ${b.fate}` : ""}
              </div>
              <div class="text-xs text-gray-500 dark:text-slate-400 mt-1">{b.category}</div>
            </article>
          </li>
        ))}
      </ul>
    </>
  )}
</Base>
